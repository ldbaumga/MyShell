#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[326] =
    {   0,
        0,    0,   23,   21,    2,    1,   21,   21,   16,   21,
       21,   15,   13,   21,   21,   21,   21,   21,   14,   17,
       21,   21,    0,   21,    0,   20,   21,    0,   21,   21,
       21,    0,   21,   19,    0,   12,    0,   11,   10,    7,
       21,   21,   21,   21,   21,   17,   17,   17,   17,   20,
       21,   20,    0,   21,    0,   21,   19,    0,   21,    0,
       21,    0,   19,   21,    0,   19,    0,    9,   21,   21,
       21,   21,   21,   17,   17,   17,   17,   17,   21,    0,
       20,   21,    0,    0,   19,   21,    0,   19,   21,    0,
       21,    0,   18,   18,    0,   18,   21,    0,   21,   19,

        0,    0,    0,    3,   21,   21,   21,   21,   17,   17,
       17,   17,   17,   17,   21,    0,   20,   21,    0,   18,
       20,   18,   20,    0,   18,   20,    0,   21,    0,   21,
       19,    0,    0,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   21,    0,   21,   19,    0,   18,
       19,   18,    0,   19,   18,    0,   19,   21,   21,   21,
       21,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   21,    0,   21,   19,
        0,   18,   19,   18,    0,   19,   18,    0,   19,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   21,    5,   21,
       21,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,    0,
       21,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,    4,    8,    6,   17,   17,   17,   17,   17,
       17,   17,   17,   18,   18,   18,   18,   18,   18,    8,
       17,   17,   17,   17,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    8,    9,
       10,    1,    1,    1,    1,    1,   11,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   15,   16,

       17,    1,    1,    1,   18,    1,    1,    1,    1,   19,
       20,   21,    1,   22,   23,   24,   25,   26,    1,   27,
        1,    1,   28,   29,   30,   31,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[32] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[422] =
    {   0,
        0,    0,  464,   26, 3230, 3230,   54,   78,   28,  106,
       32,   33,   29,   35,   38,   57,  130,   66,  452,   64,
       60,   76,  445,  158,  441,   67,  416,   95,  186,  214,
      242,  434,  409,    0,  107,  424,   48,  423,   96,  110,
      111,  112,  113,  132,  142,  137,  139,  164,  410, 3230,
      270,  401,  298,  325,  369,  348,    0,  171,  353,  332,
      382,  152,  353,  411,  439,  193,  177,  354,  180,  192,
      196,  208,  212,  466,  218,  225,  351,   63,  494,  229,
      328,  523,  552,  581,  336,  608,  636,  256,  304,  300,
        0,  221,  663,  189,  259,  262,  692,  265,  721,  295,

      750,  779,  277,  249,  282,  295,  304,  314,  806,  835,
      306,  864,  127,  319,  294,  312,  287,    0,  892,  921,
      283,  950,  335,  269,  979,  342,  266, 1008,  341, 1037,
      263, 1066, 1095, 1122,  257,  347,  344,    0,  210,    0,
      350,  362,  275,  392,  249,  393,    0,  242, 1151, 1180,
      396, 1209,  224,    0, 1238,  208,    0,  385,  360,  389,
      421,  207,    0,  403, 1267,  426,  446, 1296, 1325,  447,
      453,  455, 1354,    0,  180, 1383, 1412,    0, 1440,  406,
      458, 1469,  463,  175,  482,    0,  161,  502,    0,  156,
     1498, 1527,  503, 1556,  148,    0, 1585,  141,    0, 1614,

      476,  464,  146, 1642,  121,    0, 1671, 1700,    0, 1728,
     1757,  278, 1786,  106,    0,  512,    0,  520,  530,  534,
      536, 1815,  104,  513,  555,    0,  560,  125,  565,  100,
        0,  566, 1844,  571,  572,  601, 1873,  575, 1901,    0,
     1929,  117, 1956, 1983,   94,    0, 2012, 2041,    0, 2069,
     2098,  383, 2127,   93,    0,  609,    0,    0,   70,  615,
      621, 2156, 2184,   66,  622, 2212, 2239,  646,  627,    0,
      633, 2266,  652,  655,  179, 2294,   60,  669,  591,    0,
      680,   71,  683, 2323,    0, 2352, 2381,  703, 2410, 2439,
     2467,   25,  469, 2495, 2522,  666, 2549, 2578,   22, 2607,

     2636,   20,  649,    0,  673, 2665, 2694,  710,  713, 2723,
      689,  740,  239,    0,   17,    0,    0,    9,    0,    0,
        0,    5,  742,  758, 3230, 2752, 2757, 2762, 2767, 2772,
     2777, 2782, 2787, 2792, 2797, 2802, 2807, 2812, 2817, 2822,
     2827, 2832, 2837, 2839, 2844, 2849, 2854, 2859, 2864, 2869,
     2874, 2879, 2884, 2889, 2894, 2899, 2904, 2909, 2914, 2919,
     2924, 2929, 2934, 2939, 2944, 2949, 2954, 2959, 2964, 2969,
     2974, 2979, 2984, 2989, 2994, 2999, 3004, 3009, 3014, 3019,
     3024, 3029, 3034, 3039, 3044, 3049, 3054, 3059, 3064, 3069,
     3074, 3079, 3084, 3089, 3094, 3099, 3104, 3109, 3114, 3119,

     3124, 3129, 3134, 3139, 3144, 3149, 3154, 3159, 3164, 3169,
     3174, 3179, 3184, 3189, 3194, 3199, 3204, 3209, 3214, 3219,
     3224
    } ;

static const flex_int16_t yy_def[422] =
    {   0,
      325,    1,  325,  326,  325,  325,  327,  326,  326,  328,
      326,  326,  329,  326,  326,  326,  326,  326,  329,  330,
      326,  326,  329,  327,  331,  326,   24,  332,  333,  334,
      328,  335,   31,   31,  336,  329,  329,  329,  329,  326,
      326,  326,  326,  326,  326,  330,  330,  337,  338,  325,
      339,  329,  332,  333,  340,   54,   54,  341,  342,  343,
      342,  344,  335,  345,  336,  336,  346,  329,  326,  326,
      326,  326,  326,  347,  337,  337,  348,  338,  349,  350,
       61,  349,  351,  352,  340,  353,  341,  341,   61,  343,
       61,  344,  354,  355,  344,  356,  357,  358,  357,   99,

      359,  360,  344,  326,  326,  326,  326,  326,  361,  361,
      362,  363,  348,  364,   82,  350,   61,   82,  351,  365,
      343,  366,  344,  119,  367,  344,  119,  368,  369,  368,
      130,  370,  371,  354,  134,  356,  372,  134,  355,  373,
      355,  356,  374,  356,   99,  358,   99,   99,  359,  375,
      358,  376,  149,  149,  377,  149,  149,  326,  326,  326,
      326,  110,  110,  362,  378,  362,  379,  380,  380,  381,
      382,  362,  365,  134,  173,  367,  383,  173,  366,  355,
      384,  366,  356,  176,  385,  176,  130,  369,  130,  130,
      370,  386,  369,  387,  191,  191,  388,  191,  191,  389,

      372,  390,  374,  375,  204,  204,  377,  391,  204,  376,
      376,  392,  376,  207,  207,  393,  207,  326,  326,  326,
      326,  378,  222,  379,  394,  222,  379,  395,  379,  169,
      169,  381,  396,  381,  397,  381,  398,  372,  383,  399,
      400,  374,  385,  386,  244,  244,  388,  401,  244,  387,
      387,  402,  387,  247,  247,  403,  247,  134,  134,  356,
      356,  404,  391,  263,  392,  405,  393,  393,  326,  406,
      326,  407,  394,  408,  395,  396,  276,  397,  409,  276,
      397,  410,  397,  411,  134,  411,  412,  356,  412,  413,
      401,  291,  402,  414,  403,  403,  415,  415,  298,  416,

      416,  301,  326,  417,  326,  418,  418,  419,  419,  420,
      409,  421,  410,  244,  244,  244,  247,  247,  247,  417,
      276,  276,  397,  397,    0,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325
    } ;

static const flex_int16_t yy_nxt[3262] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,    4,
        4,   11,   12,   13,   14,    4,   15,    4,    4,    4,
       16,    4,   17,    4,   18,    4,    4,    4,   19,    4,
       20,   22,  310,   22,   37,   38,  294,   22,   22,   23,
       22,   23,   39,   22,  290,   36,   23,  216,   23,  208,
       40,   23,  248,   37,   23,   25,   23,   25,   26,   27,
       23,   23,   22,   23,   41,   22,   23,   28,   78,   47,
       23,   22,   22,   23,   48,   67,  313,   49,   42,   23,
       23,   22,   28,   22,   45,   23,   29,  310,   23,   23,
      114,   23,   49,  208,   23,   23,   25,  200,   25,   52,

       53,   37,   68,   30,   23,   30,   23,   32,   32,   32,
       32,   33,   65,   34,   66,   22,   22,   22,   22,   35,
      294,  290,  203,   23,   23,   23,   23,   75,   69,   70,
      275,  272,  113,  266,   35,   22,   71,   22,   23,   23,
       23,   23,   47,   23,   47,   23,   43,   22,  262,   44,
       49,  203,   49,   90,  171,   23,   72,   95,   23,   25,
       23,   25,   26,   27,   73,   49,   74,   49,  133,   76,
       23,   28,   55,  202,   55,  133,   87,   77,   60,   23,
       88,   96,  103,   54,  275,   22,   28,   55,   54,   55,
       90,   56,   77,   23,   32,   57,   32,   22,   65,   58,

       66,   22,  241,  104,   23,   23,  274,  237,   23,   23,
      105,   90,  106,   22,   58,   60,  140,   22,  141,   61,
       23,   23,   90,   76,   23,   23,   95,   62,  108,  107,
       76,   77,   25,  121,   46,  102,   23,  140,   77,  141,
       23,   21,   62,   32,  313,   32,   77,   33,   23,   34,
       96,  102,  112,   77,   22,   35,   25,   55,  122,   55,
       90,   87,   23,   90,   95,   88,  312,  142,   32,   31,
       35,   80,  151,   25,   81,   82,   31,   23,   90,   32,
      203,   32,   95,   83,  200,  265,   67,   22,   96,  143,
       54,  144,   32,   84,  152,   23,   84,   24,   83,   25,

       22,   25,   52,   53,   67,  158,   96,   90,   23,   22,
       23,  166,   94,  159,   21,   25,  121,   23,  160,   22,
       60,   24,   31,   23,  172,   84,   55,   23,   55,   94,
       56,   21,   23,   49,   57,  167,   90,  161,   58,   25,
       95,  122,   23,   90,   55,   85,   49,   95,   90,  201,
      193,   90,  142,   58,   90,   21,  113,  143,   91,   37,
       63,   94,   23,   90,   96,   22,   92,  142,   55,   23,
      194,   96,  143,   23,  143,   86,  144,  140,   85,  141,
       21,   92,   93,   90,   55,  219,   55,   91,   23,  202,
       22,  144,  293,   90,   22,   92,   32,  142,   23,   32,

      151,  218,   23,  151,   90,  220,   37,   90,  166,   30,
       92,   93,   98,   23,   32,   78,   99,   23,  100,  143,
       32,  144,  152,   32,  101,  152,   22,   90,   37,   37,
       49,  166,  167,  140,   23,  141,   64,  221,   31,  101,
       32,   63,   32,   51,   65,   50,   66,   90,   90,   23,
       37,  227,  234,  114,   60,  167,   90,   37,  236,   25,
      166,   25,  240,  325,   90,   60,  102,   60,  142,  261,
       55,  110,   55,  228,   77,  229,  235,  325,  293,  111,
       77,  201,  114,   25,  167,   25,  242,  243,  325,  143,
      143,  143,  144,   46,  111,  116,  325,   25,  117,  118,

      325,  325,  325,  200,  143,   55,   55,  119,  325,  325,
      325,  193,  193,   32,   90,   32,  325,  267,  227,  268,
      325,   24,  119,  120,  116,   22,   25,  117,  118,   55,
       55,  194,  194,   23,  325,   22,  119,  270,  269,   22,
      228,   22,  229,   23,  325,  325,  325,   23,   23,   23,
       51,  119,  120,  116,  271,   25,  123,  124,   23,  325,
      273,   90,   23,  325,   23,  227,   90,   90,  228,  325,
      227,  234,   90,   90,  325,  325,  234,  281,  325,   28,
      201,  125,   80,  228,   25,  126,  127,  274,  143,  229,
      325,  325,  228,   77,  229,  235,  311,  325,  171,  282,

      235,  283,   90,  143,  282,  325,  234,  325,   28,  129,
       55,   55,   55,  130,  295,  325,   90,  131,  296,  282,
      142,  132,   90,   32,  325,   32,  142,  325,  171,  265,
      235,  325,   22,  325,  325,   54,  132,   55,   22,   55,
       23,   87,  143,  325,  144,   88,   23,   32,  202,   32,
      144,  267,  303,  268,   22,   23,   60,  273,  305,  325,
      309,   23,   23,  133,   90,  228,  325,   55,  135,   55,
       90,  295,  325,  325,  281,  296,  136,   23,   22,  272,
      228,   90,  228,  325,   90,  281,   23,  325,  281,  325,
      137,  136,  138,  146,  311,   32,  282,  147,  283,  148,

      325,   23,  282,  325,   90,  149,  325,  312,  142,  283,
      282,   90,  283,  325,   90,  227,  310,  282,  227,   31,
      149,  150,  146,  325,   32,  325,  147,  325,  148,  325,
      143,  325,  144,  325,  149,  325,  325,  228,  325,  229,
      274,   60,  229,   90,  325,  324,  325,  281,   64,  149,
      150,  146,  325,   32,  325,  153,  325,  154,  325,   90,
      325,  325,  325,  281,  325,  325,  325,  282,  325,  282,
      325,  283,  325,  325,  325,  325,  325,   35,  325,  155,
       98,  325,   32,  325,  156,  312,  157,  283,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,   35,   90,  325,  325,
      325,  163,  325,  325,  325,  325,  325,  325,  325,  164,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,   46,  164,  165,   90,  325,  325,  325,
      163,  325,  325,  325,  325,  325,  325,  325,  164,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,   74,  164,  165,   60,  325,  325,  325,  169,
      325,  325,  325,  325,  325,  325,  325,  170,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,   75,  170,  116,  325,   25,  123,  124,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,   28,
      325,  125,  116,  325,   25,  174,  175,  325,  325,  325,
      325,  325,  325,  325,  176,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  177,  176,
      178,  116,  325,   25,  180,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  181,  325,  182,
      116,  325,   25,  183,  184,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  185,  325,  186,  188,
      325,   55,  325,  189,  325,  325,  325,  190,  325,  325,
      325,  191,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,   54,  191,  192,  188,  325,
       55,  325,  189,  325,  325,  325,  190,  325,  325,  325,
      191,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,   86,  191,  192,  188,  325,   55,
      325,  195,  325,  325,  325,  196,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,   58,  325,  197,  129,  325,   55,  325,

      198,  325,  325,  325,  199,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,   58,   90,  325,  325,  325,  135,  325,  325,
      325,  325,  325,  325,  325,  136,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  137,
      136,  138,  146,  325,   32,  325,  153,  325,  154,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,   35,  325,
      155,  146,  325,   32,  325,  205,  325,  206,  325,  325,
      325,  325,  325,  207,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  208,  207,  209,
      146,  325,   32,  325,  325,  325,  211,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  212,  325,  213,  146,
      325,   32,  325,  214,  325,  215,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  216,  325,  217,   90,  325,
      325,  325,  223,  325,  325,  325,  325,  325,  325,  325,
      224,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  225,  224,  226,   90,  325,  325,

      325,  231,  325,  325,  325,  325,  325,  325,  325,  232,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,   75,  232,  233,   90,  325,  325,  325,
      231,  325,  325,  325,  325,  325,  325,  325,  232,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  112,  232,  233,  116,  325,   25,  174,  175,
      325,  325,  325,  325,  325,  325,  325,  176,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  177,  176,  178,  116,  325,   25,  183,  184,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      185,  325,  186,   25,  325,   25,  238,  239,  325,  325,
      325,  325,  325,  325,  325,  185,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      185,  116,  325,   25,  180,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  181,  325,  182,
      116,  325,   25,  180,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  181,  325,  182,  188,

      325,   55,  325,  195,  325,  325,  325,  196,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,   58,  325,  197,  188,  325,
       55,  325,  245,  325,  325,  325,  246,  325,  325,  325,
      247,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  248,  247,  249,  188,  325,   55,
      325,  325,  325,  325,  325,  251,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  252,  325,  253,  188,  325,   55,  325,
      254,  325,  325,  325,  255,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  256,  325,  257,   60,  325,  325,  325,  259,
      325,  325,  325,  325,  325,  325,  325,  260,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  137,  260,  146,  325,   32,  325,  205,  325,  206,
      325,  325,  325,  325,  325,  207,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  208,
      207,  209,  146,  325,   32,  325,  214,  325,  215,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  216,  325,

      217,   32,  325,   32,  325,  263,  325,  264,  325,  325,
      325,  325,  325,  216,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  216,  146,
      325,   32,  325,  325,  325,  211,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  212,  325,  213,  146,  325,
       32,  325,  325,  325,  211,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  212,  325,  213,  146,  325,   32,
      325,  325,  325,  211,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  212,  325,  213,   90,  325,  325,  325,
      223,  325,  325,  325,  325,  325,  325,  325,  224,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  225,  224,  226,   90,  325,  325,  325,  277,
      325,  325,  325,  325,  325,  325,  325,  278,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  279,  278,  280,   80,  325,   25,  285,  286,  325,
      325,  325,  325,  325,  325,  325,  287,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      177,  287,   25,  325,   25,  238,  239,  325,  325,  325,
      325,  325,  325,  325,  185,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  237,  185,
       80,  325,   25,  288,  289,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  185,   25,  325,   25,
      242,  243,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  241,  188,  325,   55,  325,  245,  325,
      325,  325,  246,  325,  325,  325,  247,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      248,  247,  249,  188,  325,   55,  325,  254,  325,  325,
      325,  255,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  256,
      325,  257,   55,  325,   55,  325,  291,  325,  325,  325,
      292,  325,  325,  325,  256,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  256,
      188,  325,   55,  325,  325,  325,  325,  325,  251,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  252,  325,  253,  188,

      325,   55,  325,  325,  325,  325,  325,  251,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  252,  325,  253,  188,  325,
       55,  325,  325,  325,  325,  325,  251,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  252,  325,  253,   98,  325,   32,
      325,  298,  325,  299,  325,  325,  325,  325,  325,  300,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  208,  300,   32,  325,   32,  325,  263,
      325,  264,  325,  325,  325,  325,  325,  216,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  262,  216,   98,  325,   32,  325,  301,  325,  302,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  216,
       32,  325,   32,  325,  267,  325,  268,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  266,   60,  325,  325,
      325,  307,  325,  325,  325,  325,  325,  325,  325,  308,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  225,  308,   90,  325,  325,  325,  277,

      325,  325,  325,  325,  325,  325,  325,  278,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  279,  278,  280,  116,  325,   25,  174,  175,  325,
      325,  325,  325,  325,  325,  325,  176,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      177,  176,  178,  116,  325,   25,  174,  175,  325,  325,
      325,  325,  325,  325,  325,  176,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  237,
      176,  178,  116,  325,   25,  183,  184,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  185,  325,
      186,  116,  325,   25,  183,  184,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  241,  325,  186,
      129,  325,   55,  325,  315,  325,  325,  325,  316,  325,
      325,  325,  317,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  248,  317,   55,  325,
       55,  325,  291,  325,  325,  325,  292,  325,  325,  325,
      256,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  290,  256,  129,  325,   55,  325,

      318,  325,  325,  325,  319,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  256,   55,  325,   55,  325,  295,  325,  325,
      325,  296,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  294,
      146,  325,   32,  325,  205,  325,  206,  325,  325,  325,
      325,  325,  207,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  208,  207,  209,  146,
      325,   32,  325,  205,  325,  206,  325,  325,  325,  325,
      325,  207,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  262,  207,  209,  146,  325,
       32,  325,  214,  325,  215,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  216,  325,  217,  146,  325,   32,
      325,  214,  325,  215,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  266,  325,  217,   90,  325,  325,  325,
      223,  325,  325,  325,  325,  325,  325,  325,  224,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  225,  224,  226,   90,  325,  325,  325,  223,

      325,  325,  325,  325,  325,  325,  325,  224,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  272,  224,  226,   60,  325,  325,  325,  322,  325,
      325,  325,  325,  325,  325,  325,  323,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      279,  323,   21,  325,  325,  325,   21,   24,   24,  325,
       24,   24,   31,   31,  325,   31,   31,   23,  325,  325,
      325,   23,   46,  325,  325,  325,   46,   25,   25,  325,
       25,   25,   28,   28,  325,   28,   28,   54,   54,  325,
       54,   54,   59,   59,  325,  325,   59,   32,   32,  325,

       32,   32,   35,   35,  325,   35,   35,   75,  325,  325,
      325,   75,   49,  325,  325,  325,   49,   79,   79,  325,
       79,   79,   55,   55,  325,   55,   55,   58,   58,  325,
       58,   58,   89,   89,  325,  325,   89,   90,   90,   92,
       92,  325,  325,   92,   97,   97,  325,   97,   97,   62,
       62,  325,  325,   62,  109,  109,  325,  325,  109,   77,
      325,  325,  325,   77,  115,  115,  325,  115,  115,  116,
      116,  325,  116,  116,  119,  119,  325,  119,  119,   83,
       83,  325,   83,   83,  128,  128,  325,  128,  128,  134,
      134,  325,  325,  134,  139,  139,  325,  325,  139,  136,

      136,  325,  325,  136,  145,  145,  325,  145,  145,  146,
      146,  325,  146,  146,  149,  149,  325,  149,  149,  101,
      101,  325,  101,  101,  162,  162,  325,  325,  162,  164,
      164,  325,  325,  164,  168,  168,  325,  325,  168,  111,
      111,  325,  325,  111,  173,  173,  325,  173,  173,  179,
      179,  325,  179,  179,  176,  176,  325,  176,  176,  187,
      187,  325,  187,  187,  188,  188,  325,  188,  188,  191,
      191,  325,  191,  191,  132,  132,  325,  132,  132,  137,
      325,  325,  325,  137,  140,  325,  325,  325,  140,  143,
      325,  325,  325,  143,  204,  204,  325,  204,  204,  210,

      210,  325,  210,  210,  207,  207,  325,  207,  207,  222,
      222,  325,  325,  222,  224,  224,  325,  325,  224,  230,
      230,  325,  325,  230,  232,  232,  325,  325,  232,  170,
      170,  325,  325,  170,  177,  177,  325,  177,  177,  181,
      181,  325,  181,  181,  185,  185,  325,  185,  185,  244,
      244,  325,  244,  244,  250,  250,  325,  250,  250,  247,
      247,  325,  247,  247,  258,  258,  325,  325,  258,  260,
      260,  325,  325,  260,  208,  208,  325,  208,  208,  212,
      212,  325,  212,  212,  216,  216,  325,  216,  216,  225,
      325,  325,  325,  225,  228,  325,  325,  325,  228,  276,

      276,  325,  325,  276,  278,  278,  325,  325,  278,  284,
      284,  325,  284,  284,  140,  325,  325,  325,  140,  287,
      287,  325,  287,  287,  248,  248,  325,  248,  248,  252,
      252,  325,  252,  252,  256,  256,  325,  256,  256,  297,
      297,  325,  297,  297,  300,  300,  325,  300,  300,  304,
      325,  325,  325,  304,  306,  306,  325,  325,  306,  308,
      308,  325,  325,  308,  279,  325,  325,  325,  279,  282,
      325,  325,  325,  282,  173,  173,  325,  173,  173,  176,
      176,  325,  176,  176,  314,  314,  325,  314,  314,  317,
      317,  325,  317,  317,  204,  204,  325,  204,  204,  207,

      207,  325,  207,  207,  320,  325,  325,  325,  320,  222,
      222,  325,  325,  222,  224,  224,  325,  325,  224,  321,
      321,  325,  325,  321,  323,  323,  325,  325,  323,    3,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325
    } ;

static const flex_int16_t yy_chk[3262] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,  322,    9,   13,   13,  318,   11,   12,    4,
       14,    9,   13,   15,  315,   11,   12,  302,   14,  299,
       14,   15,  292,   37,    4,    7,    9,    7,    7,    7,
       11,   12,   16,   14,   15,   21,   15,    7,   78,   20,
       16,   18,   26,   21,   20,   37,  282,   20,   16,   18,
       26,   22,    7,    8,   18,   16,    8,  277,   21,   22,
       78,    8,   20,  264,   18,   26,   28,  259,   28,   28,

       28,   39,   39,   22,   22,    8,    8,   10,   35,   10,
       35,   10,   35,   10,   35,   40,   41,   42,   43,   10,
      254,  245,  242,   40,   41,   42,   43,  230,   41,   42,
      228,  223,  113,  214,   10,   17,   43,   44,   40,   41,
       42,   43,   46,   17,   47,   44,   17,   45,  205,   17,
       46,  203,   47,   62,  113,   45,   44,   62,   17,   24,
       44,   24,   24,   24,   45,   46,   47,   47,  198,   48,
       45,   24,   58,  203,   58,  195,   58,   48,   67,   62,
       58,   62,   67,  190,  275,   69,   24,   29,  187,   29,
       94,   29,   48,   69,   66,   29,   66,   70,   66,   29,

       66,   71,  184,   69,   67,   70,  275,  175,   69,   71,
       70,  139,   71,   72,   29,   30,   94,   73,   94,   30,
       70,   72,   92,   75,   71,   73,   92,   30,   73,   72,
       76,   75,   80,   80,  162,  156,   72,  139,   76,  139,
       73,   30,   30,   31,  313,   31,   75,   31,   92,   31,
       92,  153,   76,   76,  104,   31,   80,   88,   80,   88,
       95,   88,  104,   96,   95,   88,  313,   96,   98,  148,
       31,   51,   98,   51,   51,   51,  145,  104,  103,  212,
      143,  212,  103,   51,  135,  212,   95,  105,   95,   96,
      131,   96,   98,  127,   98,  105,  124,   51,   51,   53,

      106,   53,   53,   53,  103,  105,  103,  111,  106,  107,
      105,  111,  121,  106,  117,  116,  116,  107,  107,  108,
      114,  115,  100,  106,  114,   53,   54,  108,   54,   90,
       54,   89,  107,  111,   54,  111,  123,  108,   54,  116,
      123,  116,  108,  126,  129,   85,  114,  126,  136,  137,
      129,  141,  136,   54,   59,   81,   77,  137,   59,   68,
       63,   60,  123,  142,  123,  159,   59,  142,  129,  126,
      129,  126,  137,  159,  136,   56,  136,  141,   55,  141,
       59,   59,   59,   61,  252,  159,  252,   61,  159,  142,
      158,  142,  252,  144,  160,   61,  146,  144,  158,  151,

      146,  158,  160,  151,  164,  160,   52,  180,  164,   61,
       61,   61,   64,  158,   64,   49,   64,  160,   64,  144,
      146,  144,  146,  151,   64,  151,  161,  166,   38,   36,
      164,  166,  164,  180,  161,  180,   33,  161,   64,   64,
       65,   32,   65,   27,   65,   25,   65,  167,  170,  161,
       23,  167,  170,  166,  171,  166,  172,   19,  171,  181,
      172,  181,  181,    3,  183,  202,   65,   74,  183,  202,
      293,   74,  293,  167,  170,  167,  170,    0,  293,   74,
      171,  201,  172,  185,  172,  185,  185,  185,    0,  201,
      183,  202,  183,   74,   74,   79,    0,   79,   79,   79,

        0,    0,    0,  201,  201,  188,  193,   79,    0,    0,
        0,  188,  193,  216,  224,  216,    0,  216,  224,  216,
        0,   79,   79,   79,   82,  218,   82,   82,   82,  188,
      193,  188,  193,  218,    0,  219,   82,  220,  218,  220,
      224,  221,  224,  219,    0,    0,    0,  220,  218,  221,
       82,   82,   82,   83,  221,   83,   83,   83,  219,    0,
      225,  227,  220,    0,  221,  227,  229,  232,  225,    0,
      229,  232,  234,  235,    0,    0,  234,  235,    0,   83,
      238,   83,   84,  225,   84,   84,   84,  227,  238,  227,
        0,    0,  229,  232,  229,  232,  279,    0,  234,  235,

      234,  235,  236,  238,  279,    0,  236,    0,   84,   86,
      256,   86,  256,   86,  256,    0,  260,   86,  256,  279,
      260,   86,  261,  265,    0,  265,  261,    0,  236,  265,
      236,    0,  269,    0,    0,   86,   86,   87,  271,   87,
      269,   87,  260,    0,  260,   87,  271,  268,  261,  268,
      261,  268,  269,  268,  303,  269,  274,  273,  271,    0,
      274,  271,  303,   87,   93,  273,    0,  296,   93,  296,
      278,  296,    0,    0,  278,  296,   93,  303,  305,  273,
      273,  281,  274,    0,  283,  281,  305,    0,  283,    0,
       93,   93,   93,   97,  311,   97,  278,   97,  278,   97,

        0,  305,  311,    0,  288,   97,    0,  281,  288,  281,
      283,  308,  283,    0,  309,  308,  311,  311,  309,   97,
       97,   97,   99,    0,   99,    0,   99,    0,   99,    0,
      288,    0,  288,    0,   99,    0,    0,  308,    0,  308,
      309,  312,  309,  323,    0,  312,    0,  323,   99,   99,
       99,  101,    0,  101,    0,  101,    0,  101,    0,  324,
        0,    0,    0,  324,    0,    0,    0,  312,    0,  323,
        0,  323,    0,    0,    0,    0,    0,  101,    0,  101,
      102,    0,  102,    0,  102,  324,  102,  324,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  102,  109,    0,    0,
        0,  109,    0,    0,    0,    0,    0,    0,    0,  109,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  109,  109,  109,  110,    0,    0,    0,
      110,    0,    0,    0,    0,    0,    0,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  110,  110,  110,  112,    0,    0,    0,  112,
        0,    0,    0,    0,    0,    0,    0,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,  112,  119,    0,  119,  119,  119,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
        0,  119,  120,    0,  120,  120,  120,    0,    0,    0,
        0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  120,  120,
      120,  122,    0,  122,  122,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  122,    0,  122,
      125,    0,  125,  125,  125,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  125,    0,  125,  128,
        0,  128,    0,  128,    0,    0,    0,  128,    0,    0,
        0,  128,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  128,  128,  128,  130,    0,
      130,    0,  130,    0,    0,    0,  130,    0,    0,    0,
      130,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,  130,  130,  132,    0,  132,
        0,  132,    0,    0,    0,  132,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,    0,  132,  133,    0,  133,    0,

      133,    0,    0,    0,  133,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,  134,    0,    0,    0,  134,    0,    0,
        0,    0,    0,    0,    0,  134,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  134,
      134,  134,  149,    0,  149,    0,  149,    0,  149,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
      149,  150,    0,  150,    0,  150,    0,  150,    0,    0,
        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  150,  150,  150,
      152,    0,  152,    0,    0,    0,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  152,    0,  152,  155,
        0,  155,    0,  155,    0,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,    0,  155,  165,    0,
        0,    0,  165,    0,    0,    0,    0,    0,    0,    0,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  165,  165,  165,  168,    0,    0,

        0,  168,    0,    0,    0,    0,    0,    0,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  168,  168,  168,  169,    0,    0,    0,
      169,    0,    0,    0,    0,    0,    0,    0,  169,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  169,  169,  169,  173,    0,  173,  173,  173,
        0,    0,    0,    0,    0,    0,    0,  173,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,  173,  173,  176,    0,  176,  176,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,    0,  176,  177,    0,  177,  177,  177,    0,    0,
        0,    0,    0,    0,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      177,  179,    0,  179,  179,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  179,    0,  179,
      182,    0,  182,  182,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  182,    0,  182,  191,

        0,  191,    0,  191,    0,    0,    0,  191,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  191,    0,  191,  192,    0,
      192,    0,  192,    0,    0,    0,  192,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  192,  192,  192,  194,    0,  194,
        0,    0,    0,    0,    0,  194,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  194,    0,  194,  197,    0,  197,    0,
      197,    0,    0,    0,  197,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  197,    0,  197,  200,    0,    0,    0,  200,
        0,    0,    0,    0,    0,    0,    0,  200,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  200,  200,  204,    0,  204,    0,  204,    0,  204,
        0,    0,    0,    0,    0,  204,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
      204,  204,  207,    0,  207,    0,  207,    0,  207,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  207,    0,

      207,  208,    0,  208,    0,  208,    0,  208,    0,    0,
        0,    0,    0,  208,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  208,  210,
        0,  210,    0,    0,    0,  210,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  210,    0,  210,  211,    0,
      211,    0,    0,    0,  211,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  211,    0,  211,  213,    0,  213,
        0,    0,    0,  213,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  213,    0,  213,  222,    0,    0,    0,
      222,    0,    0,    0,    0,    0,    0,    0,  222,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  222,  222,  222,  233,    0,    0,    0,  233,
        0,    0,    0,    0,    0,    0,    0,  233,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  233,  233,  233,  237,    0,  237,  237,  237,    0,
        0,    0,    0,    0,    0,    0,  237,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      237,  237,  239,    0,  239,  239,  239,    0,    0,    0,
        0,    0,    0,    0,  239,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  239,
      241,    0,  241,  241,  241,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  241,  243,    0,  243,
      243,  243,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  243,  244,    0,  244,    0,  244,    0,
        0,    0,  244,    0,    0,    0,  244,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      244,  244,  244,  247,    0,  247,    0,  247,    0,    0,
        0,  247,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  247,
        0,  247,  248,    0,  248,    0,  248,    0,    0,    0,
      248,    0,    0,    0,  248,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  248,
      250,    0,  250,    0,    0,    0,    0,    0,  250,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  250,    0,  250,  251,

        0,  251,    0,    0,    0,    0,    0,  251,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  251,    0,  251,  253,    0,
      253,    0,    0,    0,    0,    0,  253,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  253,    0,  253,  262,    0,  262,
        0,  262,    0,  262,    0,    0,    0,    0,    0,  262,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  262,  262,  263,    0,  263,    0,  263,
        0,  263,    0,    0,    0,    0,    0,  263,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  263,  263,  266,    0,  266,    0,  266,    0,  266,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  266,
      267,    0,  267,    0,  267,    0,  267,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  267,  272,    0,    0,
        0,  272,    0,    0,    0,    0,    0,    0,    0,  272,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  272,  272,  276,    0,    0,    0,  276,

        0,    0,    0,    0,    0,    0,    0,  276,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  276,  276,  276,  284,    0,  284,  284,  284,    0,
        0,    0,    0,    0,    0,    0,  284,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      284,  284,  284,  286,    0,  286,  286,  286,    0,    0,
        0,    0,    0,    0,    0,  286,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  286,
      286,  286,  287,    0,  287,  287,  287,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  287,    0,
      287,  289,    0,  289,  289,  289,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  289,    0,  289,
      290,    0,  290,    0,  290,    0,    0,    0,  290,    0,
        0,    0,  290,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  290,  290,  291,    0,
      291,    0,  291,    0,    0,    0,  291,    0,    0,    0,
      291,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  291,  291,  294,    0,  294,    0,

      294,    0,    0,    0,  294,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  294,  295,    0,  295,    0,  295,    0,    0,
        0,  295,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  295,
      297,    0,  297,    0,  297,    0,  297,    0,    0,    0,
        0,    0,  297,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  297,  297,  297,  298,
        0,  298,    0,  298,    0,  298,    0,    0,    0,    0,
        0,  298,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  298,  298,  298,  300,    0,
      300,    0,  300,    0,  300,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  300,    0,  300,  301,    0,  301,
        0,  301,    0,  301,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  301,    0,  301,  306,    0,    0,    0,
      306,    0,    0,    0,    0,    0,    0,    0,  306,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  306,  306,  306,  307,    0,    0,    0,  307,

        0,    0,    0,    0,    0,    0,    0,  307,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  307,  307,  307,  310,    0,    0,    0,  310,    0,
        0,    0,    0,    0,    0,    0,  310,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      310,  310,  326,    0,    0,    0,  326,  327,  327,    0,
      327,  327,  328,  328,    0,  328,  328,  329,    0,    0,
        0,  329,  330,    0,    0,    0,  330,  331,  331,    0,
      331,  331,  332,  332,    0,  332,  332,  333,  333,    0,
      333,  333,  334,  334,    0,    0,  334,  335,  335,    0,

      335,  335,  336,  336,    0,  336,  336,  337,    0,    0,
        0,  337,  338,    0,    0,    0,  338,  339,  339,    0,
      339,  339,  340,  340,    0,  340,  340,  341,  341,    0,
      341,  341,  342,  342,    0,    0,  342,  343,  343,  344,
      344,    0,    0,  344,  345,  345,    0,  345,  345,  346,
      346,    0,    0,  346,  347,  347,    0,    0,  347,  348,
        0,    0,    0,  348,  349,  349,    0,  349,  349,  350,
      350,    0,  350,  350,  351,  351,    0,  351,  351,  352,
      352,    0,  352,  352,  353,  353,    0,  353,  353,  354,
      354,    0,    0,  354,  355,  355,    0,    0,  355,  356,

      356,    0,    0,  356,  357,  357,    0,  357,  357,  358,
      358,    0,  358,  358,  359,  359,    0,  359,  359,  360,
      360,    0,  360,  360,  361,  361,    0,    0,  361,  362,
      362,    0,    0,  362,  363,  363,    0,    0,  363,  364,
      364,    0,    0,  364,  365,  365,    0,  365,  365,  366,
      366,    0,  366,  366,  367,  367,    0,  367,  367,  368,
      368,    0,  368,  368,  369,  369,    0,  369,  369,  370,
      370,    0,  370,  370,  371,  371,    0,  371,  371,  372,
        0,    0,    0,  372,  373,    0,    0,    0,  373,  374,
        0,    0,    0,  374,  375,  375,    0,  375,  375,  376,

      376,    0,  376,  376,  377,  377,    0,  377,  377,  378,
      378,    0,    0,  378,  379,  379,    0,    0,  379,  380,
      380,    0,    0,  380,  381,  381,    0,    0,  381,  382,
      382,    0,    0,  382,  383,  383,    0,  383,  383,  384,
      384,    0,  384,  384,  385,  385,    0,  385,  385,  386,
      386,    0,  386,  386,  387,  387,    0,  387,  387,  388,
      388,    0,  388,  388,  389,  389,    0,    0,  389,  390,
      390,    0,    0,  390,  391,  391,    0,  391,  391,  392,
      392,    0,  392,  392,  393,  393,    0,  393,  393,  394,
        0,    0,    0,  394,  395,    0,    0,    0,  395,  396,

      396,    0,    0,  396,  397,  397,    0,    0,  397,  398,
      398,    0,  398,  398,  399,    0,    0,    0,  399,  400,
      400,    0,  400,  400,  401,  401,    0,  401,  401,  402,
      402,    0,  402,  402,  403,  403,    0,  403,  403,  404,
      404,    0,  404,  404,  405,  405,    0,  405,  405,  406,
        0,    0,    0,  406,  407,  407,    0,    0,  407,  408,
      408,    0,    0,  408,  409,    0,    0,    0,  409,  410,
        0,    0,    0,  410,  411,  411,    0,  411,  411,  412,
      412,    0,  412,  412,  413,  413,    0,  413,  413,  414,
      414,    0,  414,  414,  415,  415,    0,  415,  415,  416,

      416,    0,  416,  416,  417,    0,    0,    0,  417,  418,
      418,    0,    0,  418,  419,  419,    0,    0,  419,  420,
      420,    0,    0,  420,  421,  421,    0,    0,  421,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[23] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"
#include <pwd.h>
#include <sys/wait.h>
#include <unistd.h>
#include <cstring>
#include "y.tab.hh"
#include <string.h>
#include <algorithm>
static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 1340 "lex.yy.cc"
#line 1341 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "shell.l"


#line 1561 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 326 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3230 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 30 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "shell.l"
{
    return EXIT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "shell.l"
{
    return PRINTENV;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "shell.l"
{
    return SETENV;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "shell.l"
{
    return UNSETENV;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 "shell.l"
{
    return CD;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "shell.l"
{
     std::string str = std::string(yytext);
     str = str.substr(7, str.size());
     FILE * sourceFile = fopen(str.c_str(), "r+");

    if (!sourceFile) {
        perror("fopen");
        BEGIN(INITIAL);
    } else {
        fputc('\n', sourceFile);
        yypush_buffer_state(yy_create_buffer(sourceFile, YY_BUF_SIZE));
        BEGIN(INITIAL);
        yyparse();
        yypop_buffer_state();
        fclose(sourceFile);
    }
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 76 "shell.l"
{
    return GREATGREATAMP;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "shell.l"
{
    return GREATGREAT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 84 "shell.l"
{
    return GREATAMP;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "shell.l"
{
    return TWOGREAT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "shell.l"
{
    return PIPE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 100 "shell.l"
{
    return LESS;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "shell.l"
{
    return AMPERSAND;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "shell.l"
{
    std::string str = std::string(yytext);

    std::string user = str.substr(1, str.find("/") - 1);
    const char *homedir;
    if (user.empty()) {
        homedir = getpwuid(getuid())->pw_dir;
    } else {
        passwd *us = getpwnam(user.c_str());
        if (us == NULL) {
            perror("user does not exist");
            exit(1);
        }
        homedir = us->pw_dir;
    }

    str = str.replace(0, str.find("/"), homedir);
    yylval.cpp_string = new std::string(str);
    return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "shell.l"
{
    std::string str = std::string(yytext);

    //move these to run on startup
    setenv("$", std::to_string(getpid()).c_str(), 0);
    char  path[1024];
    char * path2 = realpath("./shell", path);
    std::string path3 = new std::string(path);
    fprintf(stderr, "%s\n", path);
    setenv("SHELL", path, 0);

    std::string start("${");
    std::string end("}");

    int findStart = str.find(start);
    int findEnd = str.find(end);

    while (findStart != std::string::npos && findEnd != std::string::npos) {
        std::string inside = str.substr(str.find(start) + 2, findEnd
        - findStart - 2);


        std::string evn = std::string(getenv(inside.c_str()));

        //if (str.find(end) == str.length()) {
        //    findEnd = str.length();
        //}

        str = str.replace(findStart, findEnd -findStart + 1, evn);

        findStart = str.find(start);
        findEnd = str.find(end);
    }

    yylval.cpp_string = new std::string(str);
    return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 167 "shell.l"
{
    std::string str = std::string(yytext);
    if (str.at(0) == '$') {
        str = str.substr(2, str.size() - 3);
    } else {
        str = str.substr(1, str.size() - 2);
    }
    int pin[2];
    int pout[2];

    pipe(pin);
    pipe(pout);

    int defaultin = dup(0);
    int defaultout = dup(1);


    dup2(pin[0], 0);
    dup2(pout[1], 1);
    close(pin[0]);
    close(pout[1]);


    int pid = fork();

    write(pin[1], str.c_str(), str.size());
    write(pin[1], "\n", 1);
    write(pin[1], "exit\n", 5);
    close(pin[1]);

    if(pid == -1) {
      perror("fork\n");
      exit(1);
    }
    //CHILD
    if (pid == 0) {
    char * arg[2];
    arg[1] = NULL;
    arg[0] =(char *) "shell";


    execvp("/proc/self/exe", arg);
    perror("execvp(subshell)");
    _exit(1);
    } else { //END CHILD

    waitpid(pid, NULL, 0);

    dup2(defaultin, 0);
    dup2(defaultout, 1);
    close(defaultin);
    close(defaultout);


    char c;
    std::string a;
    while(read(pout[0], &c, 1)) {
        if (c == '\n') {
            c =' ';
        }
        a.push_back(c);
    }
    close(pout[0]);
    for ( int i = a.size() - 1; i >= 0; i--) {
        myunputc(a.at(i));
    }
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 236 "shell.l"
{
  std::string str = std::string(yytext);
  str = str.substr(1, str.size() - 2);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 243 "shell.l"
{
  /* Assume that file names have only alpha chars */
  std::string str = std::string(yytext);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 249 "shell.l"
ECHO;
	YY_BREAK
#line 1917 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 326 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 326 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 325);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 249 "shell.l"
