#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 21
#define YY_END_OF_BUFFER 22
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[322] =
    {   0,
        0,    0,   22,   20,    2,    1,   20,   20,   15,   20,
       20,   14,   12,   20,   20,   20,   20,   13,   16,   20,
       20,    0,   20,    0,   19,   20,    0,   20,   20,   20,
        0,   20,   18,    0,   11,    0,   10,    9,    6,   20,
       20,   20,   20,   16,   16,   16,   16,   19,   20,   19,
        0,   20,    0,   20,   18,    0,   20,    0,   20,    0,
       18,   20,    0,   18,    0,    8,   20,   20,   20,   20,
       16,   16,   16,   16,   16,   20,    0,   19,   20,    0,
        0,   18,   20,    0,   18,   20,    0,   20,    0,   17,
       17,    0,   17,   20,    0,   20,   18,    0,    0,    0,

       20,   20,   20,   20,   16,   16,   16,   16,   16,   16,
       20,    0,   19,   20,    0,   17,   19,   17,   19,    0,
       17,   19,    0,   20,    0,   20,   18,    0,    0,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       20,    0,   20,   18,    0,   17,   18,   17,    0,   18,
       17,    0,   18,   20,   20,   20,   20,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   20,    0,   20,   18,    0,   17,   18,   17,
        0,   18,   17,    0,   18,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   20,    4,   20,   20,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   20,    0,   20,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,    3,    7,

        5,   16,   16,   16,   16,   16,   16,   16,   16,   17,
       17,   17,   17,   17,   17,    7,   16,   16,   16,   16,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    8,    9,
       10,    1,    1,    1,    1,    1,   11,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   15,   16,

       17,    1,    1,    1,   18,    1,    1,    1,    1,   19,
       20,   21,    1,   22,   23,   24,   25,   26,    1,    1,
        1,    1,   27,   28,   29,   30,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[31] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[418] =
    {   0,
        0,    0,  512,   25, 3133, 3133,   52,   75,   27,  102,
       31,   32,   28,   34,   55,  125,   57,  505,   59,   58,
       68,  496,  152,  496,   84,  462,   95,  179,  206,  233,
      466,  438,    0,  103,  458,   41,  455,   37,  107,  108,
      109,  113,  137,  118,  134,  141,  443, 3133,  260,  437,
      287,  313,  428,  408,    0,  166,  340,  405,  368,  123,
      412,  396,  423,  169,  157,  409,  168,  185,  172,  189,
      449,  191,  195,  402,   61,  476,  211,  367,  504,  532,
      560,  383,  586,  613,  222,  354,  351,    0,  219,  639,
       91,  225,  243,  667,  249,  695,  350,  723,  751,  253,

      257,  280,  269,  292,  777,  805,  299,  833,  122,  294,
      326,  305,  310,    0,  860,  888,  304,  916,  316,  303,
      944,  323,  297,  972,  240, 1000,  286, 1028, 1056, 1082,
      285,  329,  333,    0,  275,    0,  309,  349,  301,  357,
      276,  356,    0,  268, 1110, 1138,  384, 1166,  263,    0,
     1194,  246,    0,  373,  393,  400,  416,  241,    0,  410,
     1222,  430,  439, 1250, 1278,  440,  338,  446, 1306,    0,
      233, 1334, 1362,    0, 1389,  346,   47, 1417,  456,  229,
      482,    0,  216,  362,    0,  215, 1445, 1473,  443, 1501,
      209,    0, 1529,  202,    0, 1557,  465,  489,  161, 1584,

      191,    0, 1612, 1640,    0, 1667, 1695,  401, 1723,  187,
        0,  492,    0,  343,  412,  493,  511, 1751,  184,  513,
      521,    0,  518,  204,  542,  177,    0,  548, 1779,  549,
      554,  566, 1807,  580, 1834,    0, 1861,  173, 1887, 1913,
      137,    0, 1941, 1969,    0, 1996, 2024,  188, 2052,  117,
        0,  595,    0,    0,  107,  583,  600, 2080, 2107,   90,
      452, 2134, 2160,  614,  618,    0,  622, 2186,  624,  629,
      224, 2213,   67,  631,  597,    0,  653,   86,  659, 2241,
        0, 2269, 2297,  677, 2325, 2353, 2380,   64,  660, 2407,
     2433,  683, 2459, 2487,   52, 2515, 2543,   51,  670,    0,

      686, 2571, 2599,  705,  706, 2627,  712,  711,  252,    0,
       48,    0,    0,    9,    0,    0,    0,    5,  714,  740,
     3133, 2655, 2660, 2665, 2670, 2675, 2680, 2685, 2690, 2695,
     2700, 2705, 2710, 2715, 2720, 2725, 2730, 2735, 2740, 2742,
     2747, 2752, 2757, 2762, 2767, 2772, 2777, 2782, 2787, 2792,
     2797, 2802, 2807, 2812, 2817, 2822, 2827, 2832, 2837, 2842,
     2847, 2852, 2857, 2862, 2867, 2872, 2877, 2882, 2887, 2892,
     2897, 2902, 2907, 2912, 2917, 2922, 2927, 2932, 2937, 2942,
     2947, 2952, 2957, 2962, 2967, 2972, 2977, 2982, 2987, 2992,
     2997, 3002, 3007, 3012, 3017, 3022, 3027, 3032, 3037, 3042,

     3047, 3052, 3057, 3062, 3067, 3072, 3077, 3082, 3087, 3092,
     3097, 3102, 3107, 3112, 3117, 3122, 3127
    } ;

static const flex_int16_t yy_def[418] =
    {   0,
      321,    1,  321,  322,  321,  321,  323,  322,  322,  324,
      322,  322,  325,  322,  322,  322,  322,  325,  326,  322,
      322,  325,  323,  327,  322,   23,  328,  329,  330,  324,
      331,   30,   30,  332,  325,  325,  325,  325,  322,  322,
      322,  322,  322,  326,  326,  333,  334,  321,  335,  325,
      328,  329,  336,   52,   52,  337,  338,  339,  338,  340,
      331,  341,  332,  332,  342,  325,  322,  322,  322,  322,
      343,  333,  333,  344,  334,  345,  346,   59,  345,  347,
      348,  336,  349,  337,  337,   59,  339,   59,  340,  350,
      351,  340,  352,  353,  354,  353,   96,  355,  356,  340,

      322,  322,  322,  322,  357,  357,  358,  359,  344,  360,
       79,  346,   59,   79,  347,  361,  339,  362,  340,  115,
      363,  340,  115,  364,  365,  364,  126,  366,  367,  350,
      130,  352,  368,  130,  351,  369,  351,  352,  370,  352,
       96,  354,   96,   96,  355,  371,  354,  372,  145,  145,
      373,  145,  145,  322,  322,  322,  322,  106,  106,  358,
      374,  358,  375,  376,  376,  377,  378,  358,  361,  130,
      169,  363,  379,  169,  362,  351,  380,  362,  352,  172,
      381,  172,  126,  365,  126,  126,  366,  382,  365,  383,
      187,  187,  384,  187,  187,  385,  368,  386,  370,  371,

      200,  200,  373,  387,  200,  372,  372,  388,  372,  203,
      203,  389,  203,  322,  322,  322,  322,  374,  218,  375,
      390,  218,  375,  391,  375,  165,  165,  377,  392,  377,
      393,  377,  394,  368,  379,  395,  396,  370,  381,  382,
      240,  240,  384,  397,  240,  383,  383,  398,  383,  243,
      243,  399,  243,  130,  130,  352,  352,  400,  387,  259,
      388,  401,  389,  389,  322,  402,  322,  403,  390,  404,
      391,  392,  272,  393,  405,  272,  393,  406,  393,  407,
      130,  407,  408,  352,  408,  409,  397,  287,  398,  410,
      399,  399,  411,  411,  294,  412,  412,  297,  322,  413,

      322,  414,  414,  415,  415,  416,  405,  417,  406,  240,
      240,  240,  243,  243,  243,  413,  272,  272,  393,  393,
        0,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321
    } ;

static const flex_int16_t yy_nxt[3164] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,    4,
        4,   11,   12,   13,   14,    4,    4,    4,    4,    4,
       15,    4,   16,    4,   17,    4,    4,   18,    4,   19,
       21,  306,   21,   36,   37,  290,   21,   21,   22,   21,
       22,   38,   36,   66,   35,   22,   36,   22,   24,   39,
       24,  236,   22,   24,   22,   24,   25,   26,   22,   22,
       21,   22,   21,   21,   45,   27,   75,   65,   22,   46,
       22,   22,   47,   21,  286,   43,   40,  212,  204,   27,
       21,   22,   22,   28,   22,   22,   47,  110,   22,   21,
      244,  309,   87,  306,   29,   22,   24,   22,   24,   50,

       51,   29,   22,   31,   31,   31,   31,   32,   63,   33,
       64,   22,   21,   21,   21,   34,  204,  136,   21,  137,
       22,   22,   22,   45,   87,   67,   22,  109,   92,   34,
       21,   47,   68,  196,   22,   22,   22,   69,   22,   45,
       22,   41,   21,  290,   42,   47,   73,   47,  167,   22,
       22,   93,   22,   24,   74,   24,   25,   26,   58,   70,
       71,   47,  100,  286,   22,   27,  199,   53,   74,   53,
       31,   84,   31,   21,   63,   85,   64,   21,  199,   27,
       53,   22,   53,   22,   54,   22,  101,  198,   55,   53,
       21,   53,   56,  103,   21,   22,   73,  289,   22,   22,

       73,  102,   22,   72,   74,  104,   56,   58,   74,  271,
      268,   59,   22,  262,   24,  117,   22,  258,   74,   60,
       87,  108,   74,   53,   92,   53,   87,   84,  129,  271,
       92,   85,   20,   60,   31,  129,   31,   24,   32,  118,
       33,   52,   52,   53,   87,   22,   34,   93,  138,  189,
      270,   65,   31,   93,   87,  237,  147,  309,   92,  233,
       34,   77,   21,   24,   78,   79,   53,   44,  190,  139,
       22,  140,   99,   80,   21,   31,   87,  148,  308,   65,
      154,   93,   22,  156,   22,   21,   23,   80,   24,   99,
       24,   50,   51,   22,   30,   58,   22,   21,  155,  168,

       87,  136,   30,  137,  162,   22,  199,   22,   24,  117,
       87,  196,   52,   81,   53,  157,   53,   87,   54,   22,
       47,   92,   55,   81,   87,   47,   56,  163,   92,   81,
       87,   24,   91,  118,  138,  136,   20,  137,  197,   58,
       56,   87,   22,  232,   93,   88,  139,   87,   21,   22,
       87,   93,   23,   89,  138,  139,   22,  140,   87,   31,
      139,  265,  138,  147,   74,   53,   20,   89,   90,   87,
       22,  189,  136,   88,  137,  198,   30,  140,   21,   91,
       20,   89,   31,  139,  148,  140,   22,   31,   53,  214,
      190,  147,   82,   20,   29,   89,   90,   95,   21,   31,

       22,   96,   31,   97,   31,   21,   22,  109,  261,   98,
       31,   87,  148,   22,   36,  162,  216,   21,  215,   61,
       22,   21,   30,   98,   31,   22,   31,   22,   63,   22,
       64,   87,  217,   91,   83,  162,   47,   82,  163,   22,
       87,   87,   36,   22,  223,  230,   53,   87,   75,   99,
       58,  162,  189,   31,  106,   31,  110,   87,  163,  261,
       36,  138,  107,   36,   62,  224,   74,  225,  231,   53,
      197,  190,  110,   61,  163,   44,  107,  112,  139,   24,
      113,  114,  139,   24,  140,   24,  238,  239,   49,  115,
       58,  196,  139,   31,  257,   31,  266,  263,   21,  264,

       48,   36,   23,  115,  116,  112,   22,   24,  113,  114,
       36,  321,  321,  321,   87,  139,   21,  115,  223,   87,
       22,  321,  321,  223,   22,  321,  269,  321,  321,  267,
       49,  115,  116,  112,  224,   24,  119,  120,   22,  224,
      321,  225,  321,   87,  270,  321,  225,  223,  224,   87,
       87,  321,  321,  230,  230,   87,  321,  321,   27,  277,
      121,   77,  321,   24,  122,  123,  321,   87,  224,  321,
      225,  230,  321,  321,   74,  167,  231,  231,  321,  321,
      278,  321,  279,  321,   87,  197,   27,  125,  138,   53,
      321,  126,  167,  139,  231,  127,   53,  321,   53,  128,

      291,   87,  307,  321,  292,  138,  321,  139,  321,  139,
      278,  140,   52,  128,   53,   31,   53,   31,   84,  263,
      321,  264,   85,   21,  278,  321,  198,   21,  140,  269,
       58,   22,   87,  321,  305,   22,  277,  224,  321,  129,
       87,  321,  321,  299,  131,   22,  321,  301,  321,   22,
      268,  224,  132,  321,   87,  224,  321,  278,  277,  279,
       87,   53,  321,   53,  277,  133,  132,  134,  142,  289,
       31,  321,  143,  321,  144,   21,  321,  321,   87,  308,
      145,  279,  138,   22,   53,  278,   53,  279,  291,  321,
      321,   21,  292,   30,  145,  146,  142,   22,   31,   22,

      143,  321,  144,  139,  321,  140,   87,   87,  145,  321,
      223,  223,   58,   22,  321,   87,  320,  307,  321,  277,
      321,   62,  145,  146,  142,  278,   31,  321,  149,  321,
      150,  224,  270,  225,  225,  321,  321,  278,  306,  278,
      278,   87,  279,  321,  321,  277,  321,  321,  321,   34,
      321,  151,   95,  321,   31,  321,  152,  321,  153,  321,
      321,  321,  321,  321,  321,  321,  308,  321,  279,  321,
      321,  321,  321,  321,  321,  321,  321,   34,   87,  321,
      321,  321,  159,  321,  321,  321,  321,  321,  321,  321,
      160,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,   44,  160,  161,   87,  321,  321,  321,
      159,  321,  321,  321,  321,  321,  321,  321,  160,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,   71,  160,  161,   58,  321,  321,  321,  165,  321,
      321,  321,  321,  321,  321,  321,  166,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,   72,
      166,  112,  321,   24,  119,  120,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,   27,  321,  121,  112,
      321,   24,  170,  171,  321,  321,  321,  321,  321,  321,

      321,  172,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  173,  172,  174,  112,  321,   24,
      176,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  177,  321,  178,  112,  321,   24,  179,  180,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      181,  321,  182,  184,  321,   53,  321,  185,  321,  321,
      321,  186,  321,  321,  321,  187,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,   52,  187,

      188,  184,  321,   53,  321,  185,  321,  321,  321,  186,
      321,  321,  321,  187,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,   83,  187,  188,  184,
      321,   53,  321,  191,  321,  321,  321,  192,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,   56,  321,  193,  125,  321,   53,
      321,  194,  321,  321,  321,  195,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,   56,   87,  321,  321,  321,  131,  321,  321,
      321,  321,  321,  321,  321,  132,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  133,  132,
      134,  142,  321,   31,  321,  149,  321,  150,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,   34,  321,  151,  142,
      321,   31,  321,  201,  321,  202,  321,  321,  321,  321,
      321,  203,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  204,  203,  205,  142,  321,   31,
      321,  321,  321,  207,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  208,  321,  209,  142,  321,   31,  321,  210,

      321,  211,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      212,  321,  213,   87,  321,  321,  321,  219,  321,  321,
      321,  321,  321,  321,  321,  220,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  221,  220,
      222,   87,  321,  321,  321,  227,  321,  321,  321,  321,
      321,  321,  321,  228,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,   72,  228,  229,   87,
      321,  321,  321,  227,  321,  321,  321,  321,  321,  321,
      321,  228,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  108,  228,  229,  112,  321,   24,
      170,  171,  321,  321,  321,  321,  321,  321,  321,  172,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  173,  172,  174,  112,  321,   24,  179,  180,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      181,  321,  182,   24,  321,   24,  234,  235,  321,  321,
      321,  321,  321,  321,  321,  181,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  181,
      112,  321,   24,  176,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  177,  321,  178,  112,  321,
       24,  176,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  177,  321,  178,  184,  321,   53,  321,
      191,  321,  321,  321,  192,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,   56,  321,  193,  184,  321,   53,  321,  241,  321,
      321,  321,  242,  321,  321,  321,  243,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  244,

      243,  245,  184,  321,   53,  321,  321,  321,  321,  321,
      247,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  248,  321,  249,
      184,  321,   53,  321,  250,  321,  321,  321,  251,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  252,  321,  253,   58,  321,
      321,  321,  255,  321,  321,  321,  321,  321,  321,  321,
      256,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  133,  256,  142,  321,   31,  321,  201,
      321,  202,  321,  321,  321,  321,  321,  203,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      204,  203,  205,  142,  321,   31,  321,  210,  321,  211,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  212,  321,
      213,   31,  321,   31,  321,  259,  321,  260,  321,  321,
      321,  321,  321,  212,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  212,  142,  321,
       31,  321,  321,  321,  207,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  208,  321,  209,  142,  321,   31,  321,

      321,  321,  207,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  208,  321,  209,  142,  321,   31,  321,  321,  321,
      207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  208,
      321,  209,   87,  321,  321,  321,  219,  321,  321,  321,
      321,  321,  321,  321,  220,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  221,  220,  222,
       87,  321,  321,  321,  273,  321,  321,  321,  321,  321,
      321,  321,  274,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  275,  274,  276,   77,  321,
       24,  281,  282,  321,  321,  321,  321,  321,  321,  321,
      283,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  173,  283,   24,  321,   24,  234,  235,
      321,  321,  321,  321,  321,  321,  321,  181,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      233,  181,   77,  321,   24,  284,  285,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  181,   24,  321,
       24,  238,  239,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  237,  184,  321,   53,  321,  241,  321,
      321,  321,  242,  321,  321,  321,  243,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  244,
      243,  245,  184,  321,   53,  321,  250,  321,  321,  321,
      251,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  252,  321,  253,
       53,  321,   53,  321,  287,  321,  321,  321,  288,  321,
      321,  321,  252,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  252,  184,  321,   53,

      321,  321,  321,  321,  321,  247,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  248,  321,  249,  184,  321,   53,  321,  321,
      321,  321,  321,  247,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      248,  321,  249,  184,  321,   53,  321,  321,  321,  321,
      321,  247,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  248,  321,
      249,   95,  321,   31,  321,  294,  321,  295,  321,  321,
      321,  321,  321,  296,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  204,  296,   31,  321,
       31,  321,  259,  321,  260,  321,  321,  321,  321,  321,
      212,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  258,  212,   95,  321,   31,  321,  297,
      321,  298,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      212,   31,  321,   31,  321,  263,  321,  264,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  262,   58,  321,  321,
      321,  303,  321,  321,  321,  321,  321,  321,  321,  304,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  221,  304,   87,  321,  321,  321,  273,  321,
      321,  321,  321,  321,  321,  321,  274,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  275,
      274,  276,  112,  321,   24,  170,  171,  321,  321,  321,
      321,  321,  321,  321,  172,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  173,  172,  174,
      112,  321,   24,  170,  171,  321,  321,  321,  321,  321,
      321,  321,  172,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  233,  172,  174,  112,  321,

       24,  179,  180,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  181,  321,  182,  112,  321,   24,  179,
      180,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  237,  321,  182,  125,  321,   53,  321,  311,  321,
      321,  321,  312,  321,  321,  321,  313,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  244,
      313,   53,  321,   53,  321,  287,  321,  321,  321,  288,
      321,  321,  321,  252,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  286,  252,  125,  321,
       53,  321,  314,  321,  321,  321,  315,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  252,   53,  321,   53,  321,  291,  321,
      321,  321,  292,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  290,
      142,  321,   31,  321,  201,  321,  202,  321,  321,  321,
      321,  321,  203,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  204,  203,  205,  142,  321,
       31,  321,  201,  321,  202,  321,  321,  321,  321,  321,

      203,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  258,  203,  205,  142,  321,   31,  321,
      210,  321,  211,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  212,  321,  213,  142,  321,   31,  321,  210,  321,
      211,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  262,
      321,  213,   87,  321,  321,  321,  219,  321,  321,  321,
      321,  321,  321,  321,  220,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  221,  220,  222,

       87,  321,  321,  321,  219,  321,  321,  321,  321,  321,
      321,  321,  220,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  268,  220,  222,   58,  321,
      321,  321,  318,  321,  321,  321,  321,  321,  321,  321,
      319,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  275,  319,   20,  321,  321,  321,   20,
       23,   23,  321,   23,   23,   30,   30,  321,   30,   30,
       22,  321,  321,  321,   22,   44,  321,  321,  321,   44,
       24,   24,  321,   24,   24,   27,   27,  321,   27,   27,
       52,   52,  321,   52,   52,   57,   57,  321,  321,   57,

       31,   31,  321,   31,   31,   34,   34,  321,   34,   34,
       72,  321,  321,  321,   72,   47,  321,  321,  321,   47,
       76,   76,  321,   76,   76,   53,   53,  321,   53,   53,
       56,   56,  321,   56,   56,   86,   86,  321,  321,   86,
       87,   87,   89,   89,  321,  321,   89,   94,   94,  321,
       94,   94,   60,   60,  321,  321,   60,  105,  105,  321,
      321,  105,   74,  321,  321,  321,   74,  111,  111,  321,
      111,  111,  112,  112,  321,  112,  112,  115,  115,  321,
      115,  115,   80,   80,  321,   80,   80,  124,  124,  321,
      124,  124,  130,  130,  321,  321,  130,  135,  135,  321,

      321,  135,  132,  132,  321,  321,  132,  141,  141,  321,
      141,  141,  142,  142,  321,  142,  142,  145,  145,  321,
      145,  145,   98,   98,  321,   98,   98,  158,  158,  321,
      321,  158,  160,  160,  321,  321,  160,  164,  164,  321,
      321,  164,  107,  107,  321,  321,  107,  169,  169,  321,
      169,  169,  175,  175,  321,  175,  175,  172,  172,  321,
      172,  172,  183,  183,  321,  183,  183,  184,  184,  321,
      184,  184,  187,  187,  321,  187,  187,  128,  128,  321,
      128,  128,  133,  321,  321,  321,  133,  136,  321,  321,
      321,  136,  139,  321,  321,  321,  139,  200,  200,  321,

      200,  200,  206,  206,  321,  206,  206,  203,  203,  321,
      203,  203,  218,  218,  321,  321,  218,  220,  220,  321,
      321,  220,  226,  226,  321,  321,  226,  228,  228,  321,
      321,  228,  166,  166,  321,  321,  166,  173,  173,  321,
      173,  173,  177,  177,  321,  177,  177,  181,  181,  321,
      181,  181,  240,  240,  321,  240,  240,  246,  246,  321,
      246,  246,  243,  243,  321,  243,  243,  254,  254,  321,
      321,  254,  256,  256,  321,  321,  256,  204,  204,  321,
      204,  204,  208,  208,  321,  208,  208,  212,  212,  321,
      212,  212,  221,  321,  321,  321,  221,  224,  321,  321,

      321,  224,  272,  272,  321,  321,  272,  274,  274,  321,
      321,  274,  280,  280,  321,  280,  280,  136,  321,  321,
      321,  136,  283,  283,  321,  283,  283,  244,  244,  321,
      244,  244,  248,  248,  321,  248,  248,  252,  252,  321,
      252,  252,  293,  293,  321,  293,  293,  296,  296,  321,
      296,  296,  300,  321,  321,  321,  300,  302,  302,  321,
      321,  302,  304,  304,  321,  321,  304,  275,  321,  321,
      321,  275,  278,  321,  321,  321,  278,  169,  169,  321,
      169,  169,  172,  172,  321,  172,  172,  310,  310,  321,
      310,  310,  313,  313,  321,  313,  313,  200,  200,  321,

      200,  200,  203,  203,  321,  203,  203,  316,  321,  321,
      321,  316,  218,  218,  321,  321,  218,  220,  220,  321,
      321,  220,  317,  317,  321,  321,  317,  319,  319,  321,
      321,  319,    3,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321
    } ;

static const flex_int16_t yy_chk[3164] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        4,  318,    9,   13,   13,  314,   11,   12,    4,   14,
        9,   13,   38,   38,   11,   12,   36,   14,  177,   14,
      177,  177,    4,    7,    9,    7,    7,    7,   11,   12,
       15,   14,   17,   20,   19,    7,   75,   36,   15,   19,
       17,   20,   19,   21,  311,   17,   15,  298,  295,    7,
        8,   21,   15,    8,   17,   20,   19,   75,    8,   25,
      288,  278,   91,  273,   21,   21,   27,   25,   27,   27,

       27,    8,    8,   10,   34,   10,   34,   10,   34,   10,
       34,   25,   39,   40,   41,   10,  260,   91,   42,   91,
       39,   40,   41,   44,   60,   40,   42,  109,   60,   10,
       16,   44,   41,  255,   39,   40,   41,   42,   16,   45,
       42,   16,   43,  250,   16,   44,   46,   45,  109,   60,
       43,   60,   16,   23,   46,   23,   23,   23,   65,   43,
       45,   45,   65,  241,   43,   23,  199,   56,   46,   56,
       64,   56,   64,   67,   64,   56,   64,   69,  238,   23,
       28,   67,   28,   65,   28,   69,   67,  199,   28,  248,
       68,  248,   28,   69,   70,   67,   72,  248,   68,   69,

       73,   68,   70,  226,   72,   70,   28,   29,   73,  224,
      219,   29,   68,  210,   77,   77,   70,  201,   72,   29,
       89,   73,   73,   85,   89,   85,   92,   85,  194,  271,
       92,   85,   29,   29,   30,  191,   30,   77,   30,   77,
       30,  186,  183,  125,   93,   89,   30,   89,   93,  125,
      271,   92,   95,   92,  100,  180,   95,  309,  100,  171,
       30,   49,  101,   49,   49,   49,  125,  158,  125,   93,
      101,   93,  152,   49,  103,   95,  135,   95,  309,  100,
      101,  100,  103,  103,  101,  102,   49,   49,   51,  149,
       51,   51,   51,  102,  144,  110,  103,  104,  102,  110,

      107,  135,  141,  135,  107,  104,  139,  102,  112,  112,
      137,  131,  127,   51,   52,  104,   52,  119,   52,  104,
      110,  119,   52,  123,  122,  107,   52,  107,  122,  120,
      132,  112,  117,  112,  132,  137,  113,  137,  133,  167,
       52,   57,  119,  167,  119,   57,  133,  176,  214,  122,
      138,  122,  111,   57,  138,  132,  214,  132,  140,  142,
      133,  214,  140,  142,  167,  184,   57,   57,   57,   59,
      214,  184,  176,   59,  176,  138,   97,  138,  154,   87,
       86,   59,  142,  140,  142,  140,  154,  147,  184,  154,
      184,  147,   82,   78,   59,   59,   59,   62,  155,   62,

      154,   62,  208,   62,  208,  156,  155,   74,  208,   62,
      147,  160,  147,  156,   66,  160,  156,  215,  155,   61,
      155,  157,   62,   62,   63,  215,   63,  156,   63,  157,
       63,  162,  157,   58,   54,  162,  160,   53,  160,  215,
      163,  166,   50,  157,  163,  166,  189,  168,   47,   63,
       71,  168,  189,  261,   71,  261,  162,  179,  162,  261,
       37,  179,   71,   35,   32,  163,  166,  163,  166,  189,
      197,  189,  168,   31,  168,   71,   71,   76,  197,   76,
       76,   76,  179,  181,  179,  181,  181,  181,   26,   76,
      198,  197,  197,  212,  198,  212,  216,  212,  216,  212,

       24,   22,   76,   76,   76,   79,  216,   79,   79,   79,
       18,    3,    0,    0,  220,  198,  217,   79,  220,  223,
      216,    0,    0,  223,  217,    0,  221,    0,    0,  217,
       79,   79,   79,   80,  221,   80,   80,   80,  217,  220,
        0,  220,    0,  225,  223,    0,  223,  225,  221,  228,
      230,    0,    0,  228,  230,  231,    0,    0,   80,  231,
       80,   81,    0,   81,   81,   81,    0,  232,  225,    0,
      225,  232,    0,    0,  228,  230,  228,  230,    0,    0,
      231,    0,  231,    0,  256,  234,   81,   83,  256,   83,
        0,   83,  232,  234,  232,   83,  252,    0,  252,   83,

      252,  257,  275,    0,  252,  257,    0,  234,    0,  256,
      275,  256,   83,   83,   84,  264,   84,  264,   84,  264,
        0,  264,   84,  265,  275,    0,  257,  267,  257,  269,
      270,  265,  274,    0,  270,  267,  274,  269,    0,   84,
       90,    0,    0,  265,   90,  265,    0,  267,    0,  267,
      269,  269,   90,    0,  277,  270,    0,  274,  277,  274,
      279,  289,    0,  289,  279,   90,   90,   90,   94,  289,
       94,    0,   94,    0,   94,  299,    0,    0,  284,  277,
       94,  277,  284,  299,  292,  279,  292,  279,  292,    0,
        0,  301,  292,   94,   94,   94,   96,  299,   96,  301,

       96,    0,   96,  284,    0,  284,  304,  305,   96,    0,
      304,  305,  308,  301,    0,  319,  308,  307,    0,  319,
        0,   96,   96,   96,   98,  307,   98,    0,   98,    0,
       98,  304,  305,  304,  305,    0,    0,  308,  307,  307,
      319,  320,  319,    0,    0,  320,    0,    0,    0,   98,
        0,   98,   99,    0,   99,    0,   99,    0,   99,    0,
        0,    0,    0,    0,    0,    0,  320,    0,  320,    0,
        0,    0,    0,    0,    0,    0,    0,   99,  105,    0,
        0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  105,  105,  105,  106,    0,    0,    0,
      106,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  106,  106,  106,  108,    0,    0,    0,  108,    0,
        0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
      108,  115,    0,  115,  115,  115,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  115,    0,  115,  116,
        0,  116,  116,  116,    0,    0,    0,    0,    0,    0,

        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,  116,  116,  118,    0,  118,
      118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,    0,  118,  121,    0,  121,  121,  121,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,    0,  121,  124,    0,  124,    0,  124,    0,    0,
        0,  124,    0,    0,    0,  124,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  124,  124,

      124,  126,    0,  126,    0,  126,    0,    0,    0,  126,
        0,    0,    0,  126,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  126,  126,  126,  128,
        0,  128,    0,  128,    0,    0,    0,  128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  128,    0,  128,  129,    0,  129,
        0,  129,    0,    0,    0,  129,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,  130,    0,    0,    0,  130,    0,    0,
        0,    0,    0,    0,    0,  130,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  130,  130,
      130,  145,    0,  145,    0,  145,    0,  145,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  145,    0,  145,  146,
        0,  146,    0,  146,    0,  146,    0,    0,    0,    0,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  146,  146,  146,  148,    0,  148,
        0,    0,    0,  148,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  148,    0,  148,  151,    0,  151,    0,  151,

        0,  151,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,    0,  151,  161,    0,    0,    0,  161,    0,    0,
        0,    0,    0,    0,    0,  161,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  161,  161,
      161,  164,    0,    0,    0,  164,    0,    0,    0,    0,
        0,    0,    0,  164,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  164,  164,  164,  165,
        0,    0,    0,  165,    0,    0,    0,    0,    0,    0,
        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  165,  165,  165,  169,    0,  169,
      169,  169,    0,    0,    0,    0,    0,    0,    0,  169,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  169,  169,  169,  172,    0,  172,  172,  172,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      172,    0,  172,  173,    0,  173,  173,  173,    0,    0,
        0,    0,    0,    0,    0,  173,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  173,
      175,    0,  175,  175,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  175,    0,  175,  178,    0,
      178,  178,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  178,    0,  178,  187,    0,  187,    0,
      187,    0,    0,    0,  187,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  187,    0,  187,  188,    0,  188,    0,  188,    0,
        0,    0,  188,    0,    0,    0,  188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  188,

      188,  188,  190,    0,  190,    0,    0,    0,    0,    0,
      190,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  190,    0,  190,
      193,    0,  193,    0,  193,    0,    0,    0,  193,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  193,    0,  193,  196,    0,
        0,    0,  196,    0,    0,    0,    0,    0,    0,    0,
      196,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  196,  196,  200,    0,  200,    0,  200,
        0,  200,    0,    0,    0,    0,    0,  200,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      200,  200,  200,  203,    0,  203,    0,  203,    0,  203,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  203,    0,
      203,  204,    0,  204,    0,  204,    0,  204,    0,    0,
        0,    0,    0,  204,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  204,  206,    0,
      206,    0,    0,    0,  206,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  206,    0,  206,  207,    0,  207,    0,

        0,    0,  207,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  207,    0,  207,  209,    0,  209,    0,    0,    0,
      209,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  209,
        0,  209,  218,    0,    0,    0,  218,    0,    0,    0,
        0,    0,    0,    0,  218,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  218,  218,  218,
      229,    0,    0,    0,  229,    0,    0,    0,    0,    0,
        0,    0,  229,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  229,  229,  229,  233,    0,
      233,  233,  233,    0,    0,    0,    0,    0,    0,    0,
      233,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  233,  233,  235,    0,  235,  235,  235,
        0,    0,    0,    0,    0,    0,    0,  235,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      235,  235,  237,    0,  237,  237,  237,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  237,  239,    0,
      239,  239,  239,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  239,  240,    0,  240,    0,  240,    0,
        0,    0,  240,    0,    0,    0,  240,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
      240,  240,  243,    0,  243,    0,  243,    0,    0,    0,
      243,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  243,    0,  243,
      244,    0,  244,    0,  244,    0,    0,    0,  244,    0,
        0,    0,  244,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  244,  246,    0,  246,

        0,    0,    0,    0,    0,  246,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  246,    0,  246,  247,    0,  247,    0,    0,
        0,    0,    0,  247,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      247,    0,  247,  249,    0,  249,    0,    0,    0,    0,
        0,  249,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  249,    0,
      249,  258,    0,  258,    0,  258,    0,  258,    0,    0,
        0,    0,    0,  258,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  258,  258,  259,    0,
      259,    0,  259,    0,  259,    0,    0,    0,    0,    0,
      259,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  259,  259,  262,    0,  262,    0,  262,
        0,  262,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,  263,    0,  263,    0,  263,    0,  263,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  263,  268,    0,    0,
        0,  268,    0,    0,    0,    0,    0,    0,    0,  268,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  268,  268,  272,    0,    0,    0,  272,    0,
        0,    0,    0,    0,    0,    0,  272,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  272,
      272,  272,  280,    0,  280,  280,  280,    0,    0,    0,
        0,    0,    0,    0,  280,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  280,  280,  280,
      282,    0,  282,  282,  282,    0,    0,    0,    0,    0,
        0,    0,  282,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  282,  282,  282,  283,    0,

      283,  283,  283,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  283,    0,  283,  285,    0,  285,  285,
      285,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  285,    0,  285,  286,    0,  286,    0,  286,    0,
        0,    0,  286,    0,    0,    0,  286,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  286,
      286,  287,    0,  287,    0,  287,    0,    0,    0,  287,
        0,    0,    0,  287,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  287,  287,  290,    0,
      290,    0,  290,    0,    0,    0,  290,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  290,  291,    0,  291,    0,  291,    0,
        0,    0,  291,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
      293,    0,  293,    0,  293,    0,  293,    0,    0,    0,
        0,    0,  293,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  293,  293,  293,  294,    0,
      294,    0,  294,    0,  294,    0,    0,    0,    0,    0,

      294,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  294,  294,  294,  296,    0,  296,    0,
      296,    0,  296,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  296,    0,  296,  297,    0,  297,    0,  297,    0,
      297,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
        0,  297,  302,    0,    0,    0,  302,    0,    0,    0,
        0,    0,    0,    0,  302,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  302,  302,  302,

      303,    0,    0,    0,  303,    0,    0,    0,    0,    0,
        0,    0,  303,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  303,  303,  303,  306,    0,
        0,    0,  306,    0,    0,    0,    0,    0,    0,    0,
      306,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  306,  306,  322,    0,    0,    0,  322,
      323,  323,    0,  323,  323,  324,  324,    0,  324,  324,
      325,    0,    0,    0,  325,  326,    0,    0,    0,  326,
      327,  327,    0,  327,  327,  328,  328,    0,  328,  328,
      329,  329,    0,  329,  329,  330,  330,    0,    0,  330,

      331,  331,    0,  331,  331,  332,  332,    0,  332,  332,
      333,    0,    0,    0,  333,  334,    0,    0,    0,  334,
      335,  335,    0,  335,  335,  336,  336,    0,  336,  336,
      337,  337,    0,  337,  337,  338,  338,    0,    0,  338,
      339,  339,  340,  340,    0,    0,  340,  341,  341,    0,
      341,  341,  342,  342,    0,    0,  342,  343,  343,    0,
        0,  343,  344,    0,    0,    0,  344,  345,  345,    0,
      345,  345,  346,  346,    0,  346,  346,  347,  347,    0,
      347,  347,  348,  348,    0,  348,  348,  349,  349,    0,
      349,  349,  350,  350,    0,    0,  350,  351,  351,    0,

        0,  351,  352,  352,    0,    0,  352,  353,  353,    0,
      353,  353,  354,  354,    0,  354,  354,  355,  355,    0,
      355,  355,  356,  356,    0,  356,  356,  357,  357,    0,
        0,  357,  358,  358,    0,    0,  358,  359,  359,    0,
        0,  359,  360,  360,    0,    0,  360,  361,  361,    0,
      361,  361,  362,  362,    0,  362,  362,  363,  363,    0,
      363,  363,  364,  364,    0,  364,  364,  365,  365,    0,
      365,  365,  366,  366,    0,  366,  366,  367,  367,    0,
      367,  367,  368,    0,    0,    0,  368,  369,    0,    0,
        0,  369,  370,    0,    0,    0,  370,  371,  371,    0,

      371,  371,  372,  372,    0,  372,  372,  373,  373,    0,
      373,  373,  374,  374,    0,    0,  374,  375,  375,    0,
        0,  375,  376,  376,    0,    0,  376,  377,  377,    0,
        0,  377,  378,  378,    0,    0,  378,  379,  379,    0,
      379,  379,  380,  380,    0,  380,  380,  381,  381,    0,
      381,  381,  382,  382,    0,  382,  382,  383,  383,    0,
      383,  383,  384,  384,    0,  384,  384,  385,  385,    0,
        0,  385,  386,  386,    0,    0,  386,  387,  387,    0,
      387,  387,  388,  388,    0,  388,  388,  389,  389,    0,
      389,  389,  390,    0,    0,    0,  390,  391,    0,    0,

        0,  391,  392,  392,    0,    0,  392,  393,  393,    0,
        0,  393,  394,  394,    0,  394,  394,  395,    0,    0,
        0,  395,  396,  396,    0,  396,  396,  397,  397,    0,
      397,  397,  398,  398,    0,  398,  398,  399,  399,    0,
      399,  399,  400,  400,    0,  400,  400,  401,  401,    0,
      401,  401,  402,    0,    0,    0,  402,  403,  403,    0,
        0,  403,  404,  404,    0,    0,  404,  405,    0,    0,
        0,  405,  406,    0,    0,    0,  406,  407,  407,    0,
      407,  407,  408,  408,    0,  408,  408,  409,  409,    0,
      409,  409,  410,  410,    0,  410,  410,  411,  411,    0,

      411,  411,  412,  412,    0,  412,  412,  413,    0,    0,
        0,  413,  414,  414,    0,    0,  414,  415,  415,    0,
        0,  415,  416,  416,    0,    0,  416,  417,  417,    0,
        0,  417,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[22] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"
#include <pwd.h>
#include <sys/wait.h>
#include <unistd.h>
#include <cstring>
#include "y.tab.hh"
#include <string.h>
#include <algorithm>
static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 1315 "lex.yy.cc"
#line 1316 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "shell.l"


#line 1536 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 322 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3133 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 30 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "shell.l"
{
    return PRINTENV;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 43 "shell.l"
{
    return SETENV;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "shell.l"
{
    return UNSETENV;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "shell.l"
{
    return CD;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "shell.l"
{
     std::string str = std::string(yytext);
     str = str.substr(7, str.size());
     FILE * sourceFile = fopen(str.c_str(), "r+");

    if (!sourceFile) {
        perror("fopen");
        BEGIN(INITIAL);
    } else {
        fputc('\n', sourceFile);
        yypush_buffer_state(yy_create_buffer(sourceFile, YY_BUF_SIZE));
        BEGIN(INITIAL);
        yyparse();
        yypop_buffer_state();
        fclose(sourceFile);
    }
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "shell.l"
{
    return GREATGREATAMP;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "shell.l"
{
    return GREATGREAT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "shell.l"
{
    return GREATAMP;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 85 "shell.l"
{
    return TWOGREAT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 89 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 93 "shell.l"
{
    return PIPE;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "shell.l"
{
    return LESS;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 101 "shell.l"
{
    return AMPERSAND;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "shell.l"
{
    std::string str = std::string(yytext);

    std::string user = str.substr(1, str.find("/") - 1);
    const char *homedir;
    if (user.empty()) {
        homedir = getpwuid(getuid())->pw_dir;
    } else {
        passwd *us = getpwnam(user.c_str());
        if (us == NULL) {
            perror("user does not exist");
            exit(1);
        }
        homedir = us->pw_dir;
    }

    str = str.replace(0, str.find("/"), homedir);
    yylval.cpp_string = new std::string(str);
    return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "shell.l"
{
    std::string str = std::string(yytext);

    //move these to run on startup
    setenv("$", std::to_string(getpid()).c_str(), 0);
    char  path[1024];
    char * path2 = realpath("./shell", path);
    std::string path3 = std::string(path);
    //fprintf(stderr, "%s\n", path3.c_str());
    setenv("SHELL", path3.c_str(), 0);

    std::string start("${");
    std::string end("}");

    int findStart = str.find(start);
    int findEnd = str.find(end);

    while (findStart != std::string::npos && findEnd != std::string::npos) {
        std::string inside = str.substr(str.find(start) + 2, findEnd
        - findStart - 2);


        std::string evn = std::string(getenv(inside.c_str()));

        //if (str.find(end) == str.length()) {
        //    findEnd = str.length();
        //}

        str = str.replace(findStart, findEnd -findStart + 1, evn);

        findStart = str.find(start);
        findEnd = str.find(end);
    }

    yylval.cpp_string = new std::string(str);
    return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 164 "shell.l"
{
    std::string str = std::string(yytext);
    if (str.at(0) == '$') {
        str = str.substr(2, str.size() - 3);
    } else {
        str = str.substr(1, str.size() - 2);
    }
    int pin[2];
    int pout[2];

    pipe(pin);
    pipe(pout);

    int defaultin = dup(0);
    int defaultout = dup(1);


    dup2(pin[0], 0);
    dup2(pout[1], 1);
    close(pin[0]);
    close(pout[1]);


    int pid = fork();

    write(pin[1], str.c_str(), str.size());
    write(pin[1], "\n", 1);
    write(pin[1], "exit\n", 5);
    close(pin[1]);

    if(pid == -1) {
      perror("fork\n");
      exit(1);
    }
    //CHILD
    if (pid == 0) {
    char * arg[2];
    arg[1] = NULL;
    arg[0] =(char *) "shell";


    execvp("/proc/self/exe", arg);
    perror("execvp(subshell)");
    _exit(1);
    } else { //END CHILD

    waitpid(pid, NULL, 0);

    dup2(defaultin, 0);
    dup2(defaultout, 1);
    close(defaultin);
    close(defaultout);


    char c;
    std::string a;
    while(read(pout[0], &c, 1)) {
        if (c == '\n') {
            c =' ';
        }
        a.push_back(c);
    }
    close(pout[0]);
    for ( int i = a.size() - 1; i >= 0; i--) {
        myunputc(a.at(i));
    }
    }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 233 "shell.l"
{
  std::string str = std::string(yytext);
  str = str.substr(1, str.size() - 2);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 240 "shell.l"
{
  /* Assume that file names have only alpha chars */
  std::string str = std::string(yytext);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 246 "shell.l"
ECHO;
	YY_BREAK
#line 1885 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 322 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 322 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 321);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 246 "shell.l"
