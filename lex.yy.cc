#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[275] =
    {   0,
        0,    0,   23,   21,    2,    1,    2,   21,   21,   16,
       21,   21,   15,   13,   21,   21,   21,   21,   21,   14,
       17,   21,    0,   21,    0,   21,    0,    0,   20,   21,
       21,   21,   21,    0,    0,   21,   19,   12,   11,   10,
        7,   21,   21,   21,   21,   21,   17,   17,   17,   17,
        0,   20,   20,    0,   21,   21,    0,    0,   21,   19,
       21,    0,   21,    0,   18,   19,    0,   19,   21,    9,
       21,   21,   21,   21,   21,   17,   17,   17,   17,   17,
        0,   18,    0,   21,    0,   20,   21,    0,   18,   19,
        0,   19,   21,   18,   18,   18,   18,   18,   18,   18,

        0,   21,    0,   21,   19,    0,   18,    3,   21,   21,
       21,   21,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   20,    0,   18,   20,   18,   18,   18,   18,   18,
       18,   18,   18,    0,   21,    0,   21,   19,    0,   18,
       18,   18,   18,   18,   18,   18,    0,   19,   18,   19,
       18,   18,   18,   18,   18,   18,   18,   18,   21,   21,
       21,   21,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    0,   19,   18,
       19,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   21,    5,   21,   21,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   21,    0,   21,   17,   17,   17,   17,
       17,   17,   17,   18,   18,    4,    8,    8,    6,   17,
       17,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    8,    9,
       10,    1,    1,    1,    1,    1,   11,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   15,   16,

       17,    1,    1,    1,   18,    1,    1,    1,    1,   19,
       20,   21,    1,   22,   23,   24,   25,   26,    1,   27,
        1,    1,   28,   29,   30,   31,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[32] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[343] =
    {   0,
        0,    0,  438,   28, 3195, 3195,  431,   56,   82,   24,
      110,   26,   27,   31,   35,   37,   44,   39,   59,  430,
      136,   41,  429,  424,   43,  164,  427,   71,   65,  403,
      192,  220,  249,  422,   73,  400,    0,  421,  419,   76,
       71,   80,   85,   81,   92,   98,  119,  275,  123,   35,
      303, 3195,  417,  126,  332,  361,  411,  128,  387,    0,
      389,  384,  385,  418,  447,  401,  143,   98,  476,  393,
      132,  127,  144,  135,  158,  505,  170,  532,   91,  173,
      560,  589,  618,  647,  177,    0,  356,  676,  705,  363,
      181,  198,  734,  160,  763,  352,  324,  792,  206,    0,

      821,  850,  209,  315,    0,  879,  908,  164,  205,  219,
      188,  216,  937,  314,  966,  995, 1024,  226, 1053, 1082,
     1111, 1140,  301, 1169,  289, 1198, 1227,  213,    0,  287,
     1256, 1285,    0, 1313, 1342,  232,  286,    0, 1371, 1400,
      239,    0,  254,  152,    0, 1427,  273,    0, 1455,  257,
     1484, 1513,  262,  249,    0, 1542, 1571,    0,  263,  262,
      266,  283, 1599, 1628, 1657,  245, 1686,  292,    0, 1715,
      238, 1744, 1773, 1802, 1831, 1860,  231,    0, 1889,  117,
      295, 1918,  239,  311,    0,  306, 1947,  183,    0, 1975,
      298, 2004, 2033,  221,  157,    0, 2062, 2091,    0,  131,

        0,    0, 2119,  187, 2148, 2177,  316,  339,    0, 2206,
       87,  267,  265,  323,  321, 2234,  344, 2263,    0, 2290,
     2318, 2347, 2376,   74, 2405,  350,    0,    0,    0,   19,
        0,    0, 2434,   82, 2463, 2492,  364,  366,    0, 2521,
       15,    0,  244,  360,  349,  368, 2549,  353, 2578,  374,
     2607,    0, 2634,    0,  133,  373,  379,  383,  388, 2662,
      398,  394,  401, 2691, 2720, 2749, 2778, 2807, 2836,  402,
     2865, 2894,  406, 3195, 2924, 2928, 2932, 2936, 2940, 2944,
     2948, 2952, 2956, 2960, 2964, 2968, 2972, 2976, 2980, 2984,
     2988, 2992, 2994, 2998, 3002, 3006, 3010, 3014, 3018, 3022,

     3026, 3030, 3034, 3038, 3042, 3046, 3050, 3054, 3058, 3062,
     3066, 3070, 3074, 3078, 3082, 3086, 3090, 3094, 3098, 3102,
     3106, 3110, 3114, 3118, 3122, 3126, 3130, 3134, 3138, 3142,
     3146, 3150, 3154, 3158, 3162, 3166, 3170, 3174, 3178, 3182,
     3186, 3190
    } ;

static const flex_int16_t yy_def[343] =
    {   0,
      274,    1,  274,  275,  274,  274,  276,  277,  275,    9,
      278,    9,    9,  276,    9,    9,    9,    9,    9,  276,
      279,    9,  276,    9,  276,  277,  280,  281,    9,   26,
      282,  283,  278,  284,  285,   33,   33,  276,  276,  276,
        9,    9,    9,    9,    9,    9,  279,  279,  286,  287,
      288,  274,  276,  281,  289,  282,  290,  291,   56,   56,
      283,  292,   61,  288,  293,  284,  285,  285,  294,  276,
        9,    9,    9,    9,    9,  295,  286,  286,  296,  287,
      288,  297,  298,  289,  299,   61,   84,  298,  300,  290,
      291,  291,  301,  302,  293,  303,   95,  297,  304,   95,

      305,  294,  306,  102,  102,  305,  307,    9,    9,    9,
        9,    9,  295,  113,  308,  309,  310,  296,  308,  297,
      297,  288,   88,  311,  292,  312,  300,  313,   95,  127,
      311,  314,  127,  315,  301,  316,  135,  135,  315,  317,
      302,  318,  302,  303,   95,  304,  106,  106,  319,  306,
      320,  307,  321,  152,  152,  319,  322,  152,    9,    9,
        9,    9,  308,  323,  309,  165,  323,  324,  165,  310,
      170,  325,  326,  325,  297,  297,  131,  131,  312,  327,
      302,  312,  303,  313,  127,  304,  314,  139,  139,  328,
      316,  329,  317,  330,  193,  193,  328,  331,  193,  156,

      156,  156,  320,  332,  320,  320,  321,  321,  152,  322,
      210,    9,    9,    9,    9,  323,  333,  323,  165,  324,
      325,  334,  326,  223,  334,  335,  223,  131,  318,  197,
      197,  197,  329,  336,  329,  329,  330,  330,  193,  331,
      240,  156,  332,    9,  337,    9,  323,  333,  334,  338,
      334,  223,  335,  197,  336,    9,  339,  339,    9,  334,
      338,  339,  339,  340,  340,  340,  341,  341,  341,  342,
      341,  341,  342,    0,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274
    } ;

static const flex_int16_t yy_nxt[3227] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,    4,
        4,   12,   13,   14,   15,    4,   16,    4,    4,    4,
       17,    4,   18,    4,   19,    4,    4,    4,   20,    4,
       21,   23,   22,   24,   22,   22,   25,   39,   23,   38,
       80,   23,  198,   22,   40,   22,  254,   22,   25,   22,
       41,   22,   22,   22,   22,   44,   23,   27,   45,   28,
       29,   30,   22,   42,   22,   43,   22,   22,   22,   28,
       51,   22,   27,   22,   34,   53,   54,   46,   67,   22,
       68,   25,   70,   57,   28,   23,   22,   24,   22,   22,
       31,  255,   22,   22,   23,   23,  118,   71,   22,   34,

       22,  252,   72,   67,   73,   68,   22,   22,   22,   32,
       23,   34,   22,   35,  157,   36,   74,   37,   27,   22,
       75,  229,   23,   35,   48,   22,   23,   27,   78,   57,
       53,   54,   50,   91,   57,   22,   79,   92,   35,   23,
       22,   48,  255,   22,   34,  109,   49,   50,   67,   50,
       68,   79,   22,   83,   22,  108,  111,  144,  242,   22,
      110,   62,   22,  142,   50,   27,   22,   28,   29,   30,
      101,   22,   22,   23,  112,   78,   23,   28,   80,  175,
       27,  125,   57,   79,  239,   22,   91,  142,   34,  143,
       92,   22,   28,   57,  243,   58,   22,   59,   79,   57,

      119,   60,  161,   91,   27,   58,  126,   92,  134,   96,
      134,  146,   34,   22,   27,   22,  150,  183,  184,   96,
       58,   62,   57,   23,   22,   63,  237,   22,  159,   23,
      238,  118,   22,   64,   96,   57,   34,  160,  151,  162,
       62,  191,  142,   22,  144,   34,   22,   22,   64,   65,
       34,  243,   35,  174,   36,   62,   37,  142,  228,   57,
       34,  192,   35,   34,  150,  117,  142,  207,  143,  208,
       22,   22,  219,   22,   22,   22,  209,   35,   23,  212,
       48,  142,  214,  143,   34,  244,  151,  213,   50,   22,
       22,   22,   22,   22,   22,   96,   62,  220,  142,  215,

      101,   57,   76,   50,   62,  217,   23,  191,   81,   96,
       22,  146,   27,   93,  185,  183,  184,   34,   94,   96,
      217,  207,  142,  208,  143,   57,  245,  192,   83,   22,
       23,   22,   82,   85,   96,   28,   86,   87,  228,  246,
       34,   76,   69,  242,  207,   88,  208,   96,   22,  248,
       22,  145,   23,   96,  258,  253,   96,  144,  248,   26,
       88,   89,   57,  250,   58,   57,   59,   57,   22,  237,
       60,  237,   90,  238,   58,  238,   22,   96,  250,  261,
      247,   22,   23,   55,  263,  256,   23,   22,  263,   58,
       62,  254,   23,  259,   63,   22,   22,   23,   25,  263,

       22,   96,   64,  261,   23,   96,  263,  273,   66,   96,
      264,  273,   32,   94,   93,   22,   22,   64,   65,   62,
       90,   23,   25,   81,   25,  260,   25,   69,  264,   66,
       55,   52,   22,  272,   25,   25,   25,  274,  274,  274,
      274,  274,  274,  274,  274,   23,  274,   82,   62,  274,
       96,  274,   97,  274,  274,  274,  274,  274,  274,  274,
       98,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   99,   98,  100,  103,  274,   35,
      274,  104,  274,  105,  274,  274,  274,  274,  274,  106,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,   33,  106,  107,   62,  274,   23,  274,
      114,  274,  274,  274,  274,  274,  274,  274,  115,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,   47,  115,  116,   23,  274,   78,  274,  274,
      274,  274,  274,  274,  274,   79,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  117,
       79,   62,  274,   23,  274,   81,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   51,  274,   82,
       62,  274,   96,  274,  120,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,   96,  274,  121,   85,
      274,   28,  122,  123,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,   28,  274,  124,   85,  274,
       28,   86,   87,  274,  274,  274,  274,  274,  274,  274,
       88,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   26,   88,   89,   85,  274,   28,
      122,  123,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,   28,  274,  124,   85,  274,  128,  129,
      130,  274,  274,  274,  274,  274,  274,  274,  131,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  132,  131,  133,  136,  274,   58,  274,  137,
      274,  274,  274,  138,  274,  274,  274,  139,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   56,  139,  140,   62,  274,   96,  274,   97,  274,
      274,  274,  274,  274,  274,  274,   98,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
       99,   98,  100,   62,  274,   96,  274,  120,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,   96,
      274,  121,  103,  274,   35,  274,  147,  274,  148,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   35,  274,
      149,  103,  274,   35,  274,  104,  274,  105,  274,  274,
      274,  274,  274,  106,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   33,  106,  107,
      103,  274,   35,  274,  147,  274,  148,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,   35,  274,  149,  103,
      274,  153,  274,  154,  274,  155,  274,  274,  274,  274,
      274,  156,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  157,  156,  158,   62,  274,
       23,  274,  114,  274,  274,  274,  274,  274,  274,  274,
      115,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   47,  115,  116,   62,  274,   23,
      274,  163,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,   50,  274,  164,   62,  274,   96,  274,

      166,  274,  274,  274,  274,  274,  274,  274,  167,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  168,  167,  169,   62,  274,   23,  274,  171,
      274,  274,  274,  274,  274,  274,  274,  172,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   77,  172,  173,   62,  274,   23,  274,  163,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
       50,  274,  164,   62,  274,   96,  274,  120,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  175,
      274,  121,   62,  274,   96,  274,  120,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   96,  274,
      121,   62,  274,   23,  274,   81,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   23,  274,   82,
       85,  274,  128,  176,  177,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  128,  274,  178,   85,

      274,  180,  181,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  180,  274,  182,   85,  274,
      128,  129,  130,  274,  274,  274,  274,  274,  274,  274,
      131,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  132,  131,  133,   85,  274,  128,
      176,  177,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  128,  274,  178,   27,  274,  128,  186,
      187,  274,  274,  274,  274,  274,  274,  274,  128,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  128,  136,  274,   58,  274,  188,  274,
      274,  274,  189,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
       58,  274,  190,  136,  274,   58,  274,  137,  274,  274,
      274,  138,  274,  274,  274,  139,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,   56,
      139,  140,  136,  274,   58,  274,  188,  274,  274,  274,
      189,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   58,  274,

      190,  136,  274,  194,  274,  195,  274,  274,  274,  196,
      274,  274,  274,  197,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  198,  197,  199,
       96,  274,  146,  274,  274,  274,  274,  274,  274,  274,
       96,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  145,   96,  103,  274,  153,  274,
      200,  274,  201,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  153,  274,  202,  103,  274,  204,  274,  274,
      274,  205,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  204,  274,  206,  103,  274,  153,  274,  154,  274,
      155,  274,  274,  274,  274,  274,  156,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      157,  156,  158,  103,  274,  153,  274,  200,  274,  201,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  153,
      274,  202,   34,  274,  153,  274,  210,  274,  211,  274,
      274,  274,  274,  274,  153,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  153,

       62,  274,   23,  274,  163,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  119,  274,  164,   62,
      274,   96,  274,  216,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  217,  274,  218,   62,  274,
       96,  274,  166,  274,  274,  274,  274,  274,  274,  274,
      167,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  168,  167,  169,   62,  274,   96,
      274,  216,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  217,  274,  218,   62,  274,   23,  274,
      171,  274,  274,  274,  274,  274,  274,  274,  172,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,   77,  172,  173,   62,  274,   23,  274,  221,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   79,  274,  222,   62,  274,   96,  274,  224,  274,
      274,  274,  274,  274,  274,  274,  225,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      226,  225,  227,   62,  274,   23,  274,  221,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,   79,
      274,  222,   62,  274,   96,  274,  120,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   96,  274,
      121,   62,  274,   96,  274,  120,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   96,  274,  121,
       85,  274,  180,  181,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  180,  274,  182,   85,
      274,  180,  181,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  180,  274,  182,   27,  274,
      128,  186,  187,  274,  274,  274,  274,  274,  274,  274,
      128,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  185,  128,  136,  274,  194,  274,
      230,  274,  274,  274,  231,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  194,  274,  232,  136,  274,  234,  274,  274,
      274,  274,  274,  235,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  234,  274,  236,  136,  274,  194,  274,  195,  274,
      274,  274,  196,  274,  274,  274,  197,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      198,  197,  199,  136,  274,  194,  274,  230,  274,  274,
      274,  231,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  194,
      274,  232,   57,  274,  194,  274,  240,  274,  274,  274,

      241,  274,  274,  274,  194,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  194,
      103,  274,  204,  274,  274,  274,  205,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  204,  274,  206,  103,
      274,  204,  274,  274,  274,  205,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  204,  274,  206,  103,  274,
      204,  274,  274,  274,  205,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  204,  274,  206,   34,  274,  153,
      274,  210,  274,  211,  274,  274,  274,  274,  274,  153,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  209,  153,   62,  274,   96,  274,  216,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  247,  274,  218,   62,  274,   96,  274,  216,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      217,  274,  218,   96,  274,  220,  274,  274,  274,  274,

      274,  274,  274,  217,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  219,  217,   62,
      274,   23,  274,  221,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  174,  274,  222,   62,  274,
       96,  274,  249,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  250,  274,  251,   62,  274,   96,
      274,  224,  274,  274,  274,  274,  274,  274,  274,  225,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  226,  225,  227,   62,  274,   96,  274,
      249,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  250,  274,  251,  136,  274,  234,  274,  274,
      274,  274,  274,  235,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  234,  274,  236,  136,  274,  234,  274,  274,  274,
      274,  274,  235,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      234,  274,  236,  136,  274,  234,  274,  274,  274,  274,

      274,  235,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  234,
      274,  236,   57,  274,  194,  274,  240,  274,  274,  274,
      241,  274,  274,  274,  194,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  239,  194,
       62,  274,   96,  274,  216,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  217,  274,  218,   62,
      274,   96,  274,  249,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  260,  274,  251,   62,  274,
       96,  274,  249,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  250,  274,  251,   96,  274,  253,
      274,  274,  274,  274,  274,  274,  274,  250,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  252,  250,   62,  274,   96,  274,  249,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  250,
      274,  251,   62,  274,   23,  274,  266,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  262,  274,
      267,   62,  274,   23,  274,  266,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  262,  274,  267,
       62,  274,   23,  274,  266,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  264,  274,  267,   62,
      274,   96,  274,  269,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  270,  274,  271,   62,  274,
       96,  274,  269,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  270,  274,  271,   62,  274,   96,
      274,  269,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  272,  274,  271,   62,  274,   96,  274,
      269,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  270,  274,  271,   62,  274,   96,  274,  269,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  270,  274,  271,   22,  274,  274,   22,   23,  274,
      274,   23,   26,   26,  274,   26,   33,   33,  274,   33,
       47,  274,  274,   47,   27,   27,  274,   27,   28,   28,
      274,   28,   56,   56,  274,   56,   61,   61,  274,   61,
       34,   34,  274,   34,   35,   35,  274,   35,   77,  274,
      274,   77,   50,  274,  274,   50,   64,   64,  274,   64,
       84,   84,  274,   84,   57,   57,  274,   57,   58,   58,
      274,   58,   62,   62,   95,   95,  274,   95,  102,  102,

      274,  102,  113,  113,  274,  113,   79,  274,  274,   79,
       98,   98,  274,   98,   88,   88,  274,   88,   85,   85,
      274,   85,  127,  127,  274,  127,  135,  135,  274,  135,
      141,  141,  274,  141,   96,  274,  274,   96,   99,  274,
      274,   99,  106,  106,  274,  106,  103,  103,  274,  103,
      152,  152,  274,  152,  115,  115,  274,  115,  165,  165,
      274,  165,  170,  170,  274,  170,  131,  131,  274,  131,
      179,  179,  274,  179,  128,  128,  274,  128,  132,  132,
      274,  132,  139,  139,  274,  139,  136,  136,  274,  136,
      193,  193,  274,  193,  142,  274,  274,  142,  156,  156,

      274,  156,  203,  203,  274,  203,  153,  153,  274,  153,
      157,  157,  274,  157,  167,  167,  274,  167,  168,  274,
      274,  168,  172,  172,  274,  172,  223,  223,  274,  223,
      180,  180,  274,  180,  197,  197,  274,  197,  233,  233,
      274,  233,  194,  194,  274,  194,  198,  198,  274,  198,
      204,  204,  274,  204,  217,  274,  274,  217,  225,  225,
      274,  225,  226,  274,  274,  226,  234,  234,  274,  234,
      257,  274,  274,  257,  250,  274,  274,  250,  262,  274,
      274,  262,  265,  265,  274,  265,  268,  268,  274,  268,
      270,  274,  274,  270,    3,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274
    } ;

static const flex_int16_t yy_chk[3227] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,   10,    4,   12,   13,   14,   14,   50,   12,
       50,    4,  241,   15,   14,   16,  230,   18,   25,   22,
       15,   10,   17,   12,   13,   18,    4,    8,   18,    8,
        8,    8,   15,   16,   16,   17,   18,   19,   22,    8,
       25,   17,   28,   29,   35,   28,   28,   19,   35,   41,
       35,   40,   40,  234,    8,    9,   19,    9,   42,   44,
        9,  234,   29,   43,   79,    9,   79,   42,   41,   68,

       45,  224,   43,   68,   44,   68,   46,   42,   44,    9,
        9,   11,   43,   11,  211,   11,   45,   11,  180,   45,
       46,  180,   47,   11,   47,   46,   49,   54,   49,   58,
       54,   54,   47,   58,  255,   72,   49,   58,   11,   21,
       71,   21,  255,   74,   67,   72,   21,   47,   67,   21,
       67,   49,   73,   54,   72,   71,   74,  144,  200,   71,
       73,   94,   74,   94,   21,   26,   75,   26,   26,   26,
       67,   73,  108,   77,   75,   77,   80,   26,   80,  144,
       85,   85,   91,   77,  195,   75,   91,   94,  204,   94,
       91,  108,   26,   31,  204,   31,  111,   31,   77,   92,

       80,   31,  111,   92,   85,   31,   85,   92,   91,   99,
      188,   99,  103,  109,  128,  111,  103,  128,  128,   99,
       31,   32,  194,   32,  112,   32,  194,  110,  109,  118,
      194,  118,  109,   32,   99,  136,  103,  110,  103,  112,
      141,  136,  141,  112,  183,  243,  110,   32,   32,   32,
       33,  243,   33,  118,   33,  143,   33,  143,  177,  136,
      150,  136,   33,  153,  150,  171,  141,  153,  141,  153,
      160,  159,  166,  213,  161,  212,  154,   33,   48,  159,
       48,  143,  161,  143,  150,  212,  150,  160,   48,  160,
      159,  162,  213,  161,  212,  168,  181,  168,  181,  162,

      147,  191,   48,   48,   51,  168,   51,  191,   51,  186,
      162,  186,  184,  137,  130,  184,  184,  207,  125,  186,
      168,  207,  181,  207,  181,  191,  214,  191,  123,  215,
       51,  214,   51,   55,  186,   55,   55,   55,  184,  215,
      208,  114,  104,  207,  208,   55,  208,  217,  215,  217,
      214,   97,  245,  226,  245,  226,  248,   96,  248,   55,
       55,   55,   56,  226,   56,  237,   56,  238,  244,  237,
       56,  238,   90,  237,   56,  238,  246,  250,  226,  250,
      248,  256,  257,   87,  257,  244,  258,  244,  258,   56,
       61,  237,   61,  246,   61,  246,  259,  262,   70,  262,

      256,  261,   61,  261,  263,  270,  263,  270,   66,  273,
      258,  273,   63,   62,   59,  259,   61,   61,   61,   64,
       57,   64,   53,   64,   39,  261,   38,   36,  263,   34,
       30,   27,   24,  273,   23,   20,    7,    3,    0,    0,
        0,    0,    0,    0,    0,   64,    0,   64,   65,    0,
       65,    0,   65,    0,    0,    0,    0,    0,    0,    0,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   65,   65,   65,   69,    0,   69,
        0,   69,    0,   69,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   69,   69,   69,   76,    0,   76,    0,
       76,    0,    0,    0,    0,    0,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,   76,   76,   78,    0,   78,    0,    0,
        0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   78,
       78,   81,    0,   81,    0,   81,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,    0,   81,
       82,    0,   82,    0,   82,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,    0,   82,   83,
        0,   83,   83,   83,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,    0,   83,   84,    0,
       84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,   84,   84,   88,    0,   88,
       88,   88,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   88,    0,   88,   89,    0,   89,   89,
       89,    0,    0,    0,    0,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,   89,   89,   93,    0,   93,    0,   93,
        0,    0,    0,   93,    0,    0,    0,   93,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,   93,   93,   95,    0,   95,    0,   95,    0,
        0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,   95,   95,   98,    0,   98,    0,   98,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   98,
        0,   98,  101,    0,  101,    0,  101,    0,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
      101,  102,    0,  102,    0,  102,    0,  102,    0,    0,
        0,    0,    0,  102,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,  102,  102,
      106,    0,  106,    0,  106,    0,  106,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  106,    0,  106,  107,
        0,  107,    0,  107,    0,  107,    0,    0,    0,    0,
        0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  107,  107,  107,  113,    0,
      113,    0,  113,    0,    0,    0,    0,    0,    0,    0,
      113,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  113,  113,  113,  115,    0,  115,
        0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,    0,  115,  116,    0,  116,    0,

      116,    0,    0,    0,    0,    0,    0,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,  116,  116,  117,    0,  117,    0,  117,
        0,    0,    0,    0,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  117,  117,  117,  119,    0,  119,    0,  119,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,    0,  119,  120,    0,  120,    0,  120,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,  120,  121,    0,  121,    0,  121,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  121,    0,
      121,  122,    0,  122,    0,  122,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  122,    0,  122,
      124,    0,  124,  124,  124,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  124,    0,  124,  126,

        0,  126,  126,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  126,    0,  126,  127,    0,
      127,  127,  127,    0,    0,    0,    0,    0,    0,    0,
      127,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  127,  127,  127,  131,    0,  131,
      131,  131,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,  131,  132,    0,  132,  132,
      132,    0,    0,    0,    0,    0,    0,    0,  132,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  132,  134,    0,  134,    0,  134,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      134,    0,  134,  135,    0,  135,    0,  135,    0,    0,
        0,  135,    0,    0,    0,  135,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
      135,  135,  139,    0,  139,    0,  139,    0,    0,    0,
      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  139,    0,

      139,  140,    0,  140,    0,  140,    0,    0,    0,  140,
        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  140,  140,  140,
      146,    0,  146,    0,    0,    0,    0,    0,    0,    0,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  146,  146,  149,    0,  149,    0,
      149,    0,  149,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  149,    0,  149,  151,    0,  151,    0,    0,
        0,  151,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  151,    0,  151,  152,    0,  152,    0,  152,    0,
      152,    0,    0,    0,    0,    0,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  152,  152,  156,    0,  156,    0,  156,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,  156,  157,    0,  157,    0,  157,    0,  157,    0,
        0,    0,    0,    0,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  157,

      163,    0,  163,    0,  163,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  163,    0,  163,  164,
        0,  164,    0,  164,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  164,    0,  164,  165,    0,
      165,    0,  165,    0,    0,    0,    0,    0,    0,    0,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  165,  165,  165,  167,    0,  167,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  167,    0,  167,  170,    0,  170,    0,
      170,    0,    0,    0,    0,    0,    0,    0,  170,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  170,  170,  170,  172,    0,  172,    0,  172,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  172,    0,  172,  173,    0,  173,    0,  173,    0,
        0,    0,    0,    0,    0,    0,  173,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      173,  173,  173,  174,    0,  174,    0,  174,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  174,
        0,  174,  175,    0,  175,    0,  175,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  175,    0,
      175,  176,    0,  176,    0,  176,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,    0,  176,
      179,    0,  179,  179,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  179,    0,  179,  182,
        0,  182,  182,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  182,    0,  182,  187,    0,
      187,  187,  187,    0,    0,    0,    0,    0,    0,    0,
      187,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  187,  187,  190,    0,  190,    0,
      190,    0,    0,    0,  190,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  190,    0,  190,  192,    0,  192,    0,    0,
        0,    0,    0,  192,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  192,    0,  192,  193,    0,  193,    0,  193,    0,
        0,    0,  193,    0,    0,    0,  193,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      193,  193,  193,  197,    0,  197,    0,  197,    0,    0,
        0,  197,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  197,
        0,  197,  198,    0,  198,    0,  198,    0,    0,    0,

      198,    0,    0,    0,  198,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  198,
      203,    0,  203,    0,    0,    0,  203,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  203,    0,  203,  205,
        0,  205,    0,    0,    0,  205,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  205,    0,  205,  206,    0,
      206,    0,    0,    0,  206,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  206,    0,  206,  210,    0,  210,
        0,  210,    0,  210,    0,    0,    0,    0,    0,  210,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  210,  210,  216,    0,  216,    0,  216,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  216,    0,  216,  218,    0,  218,    0,  218,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      218,    0,  218,  220,    0,  220,    0,    0,    0,    0,

        0,    0,    0,  220,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  220,  220,  221,
        0,  221,    0,  221,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  221,    0,  221,  222,    0,
      222,    0,  222,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  222,    0,  222,  223,    0,  223,
        0,  223,    0,    0,    0,    0,    0,    0,    0,  223,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  223,  223,  223,  225,    0,  225,    0,
      225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  225,    0,  225,  233,    0,  233,    0,    0,
        0,    0,    0,  233,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  233,    0,  233,  235,    0,  235,    0,    0,    0,
        0,    0,  235,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      235,    0,  235,  236,    0,  236,    0,    0,    0,    0,

        0,  236,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
        0,  236,  240,    0,  240,    0,  240,    0,    0,    0,
      240,    0,    0,    0,  240,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  240,  240,
      247,    0,  247,    0,  247,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  247,    0,  247,  249,
        0,  249,    0,  249,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  249,    0,  249,  251,    0,
      251,    0,  251,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  251,    0,  251,  253,    0,  253,
        0,    0,    0,    0,    0,    0,    0,  253,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  253,  253,  260,    0,  260,    0,  260,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
        0,  260,  264,    0,  264,    0,  264,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  264,    0,
      264,  265,    0,  265,    0,  265,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  265,    0,  265,
      266,    0,  266,    0,  266,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  266,    0,  266,  267,
        0,  267,    0,  267,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  267,    0,  267,  268,    0,
      268,    0,  268,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  268,    0,  268,  269,    0,  269,
        0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  269,    0,  269,  271,    0,  271,    0,
      271,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  271,    0,  271,  272,    0,  272,    0,  272,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  272,    0,  272,  275,    0,    0,  275,  276,    0,
        0,  276,  277,  277,    0,  277,  278,  278,    0,  278,
      279,    0,    0,  279,  280,  280,    0,  280,  281,  281,
        0,  281,  282,  282,    0,  282,  283,  283,    0,  283,
      284,  284,    0,  284,  285,  285,    0,  285,  286,    0,
        0,  286,  287,    0,    0,  287,  288,  288,    0,  288,
      289,  289,    0,  289,  290,  290,    0,  290,  291,  291,
        0,  291,  292,  292,  293,  293,    0,  293,  294,  294,

        0,  294,  295,  295,    0,  295,  296,    0,    0,  296,
      297,  297,    0,  297,  298,  298,    0,  298,  299,  299,
        0,  299,  300,  300,    0,  300,  301,  301,    0,  301,
      302,  302,    0,  302,  303,    0,    0,  303,  304,    0,
        0,  304,  305,  305,    0,  305,  306,  306,    0,  306,
      307,  307,    0,  307,  308,  308,    0,  308,  309,  309,
        0,  309,  310,  310,    0,  310,  311,  311,    0,  311,
      312,  312,    0,  312,  313,  313,    0,  313,  314,  314,
        0,  314,  315,  315,    0,  315,  316,  316,    0,  316,
      317,  317,    0,  317,  318,    0,    0,  318,  319,  319,

        0,  319,  320,  320,    0,  320,  321,  321,    0,  321,
      322,  322,    0,  322,  323,  323,    0,  323,  324,    0,
        0,  324,  325,  325,    0,  325,  326,  326,    0,  326,
      327,  327,    0,  327,  328,  328,    0,  328,  329,  329,
        0,  329,  330,  330,    0,  330,  331,  331,    0,  331,
      332,  332,    0,  332,  333,    0,    0,  333,  334,  334,
        0,  334,  335,    0,    0,  335,  336,  336,    0,  336,
      337,    0,    0,  337,  338,    0,    0,  338,  339,    0,
        0,  339,  340,  340,    0,  340,  341,  341,    0,  341,
      342,    0,    0,  342,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[23] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"
#include <pwd.h>
#include <sys/wait.h>
#include <unistd.h>
#include <cstring>
#include "y.tab.hh"
#include <string.h>
#include <algorithm>
static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 1308 "lex.yy.cc"
#line 1309 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "shell.l"


#line 1529 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 275 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3195 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 30 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "shell.l"
{
    return EXIT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "shell.l"
{
    return PRINTENV;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "shell.l"
{
    return SETENV;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "shell.l"
{
    return UNSETENV;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 "shell.l"
{
    return CD;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "shell.l"
{
     std::string str = std::string(yytext);
     str = str.substr(7, str.size());
     FILE * sourceFile = fopen(str.c_str(), "r+");

    if (!sourceFile) {
        perror("fopen");
        BEGIN(INITIAL);
    } else {
        fputc('\n', sourceFile);
        yypush_buffer_state(yy_create_buffer(sourceFile, YY_BUF_SIZE));
        BEGIN(INITIAL);
        yyparse();
        yypop_buffer_state();
        fclose(sourceFile);
    }
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 76 "shell.l"
{
    return GREATGREATAMP;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "shell.l"
{
    return GREATGREAT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 84 "shell.l"
{
    return GREATAMP;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "shell.l"
{
    return TWOGREAT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "shell.l"
{
    return PIPE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 100 "shell.l"
{
    return LESS;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "shell.l"
{
    return AMPERSAND;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "shell.l"
{
    std::string str = std::string(yytext);

    std::string user = str.substr(1, str.find("/") - 1);
    //fprintf(stderr, "%s\n", user.c_str());
    const char *homedir;
    if (user.empty()) {
        homedir = getpwuid(getuid())->pw_dir;
    } else {
        homedir = getpwnam(user.c_str())->pw_dir;
    }
    fprintf(stderr, "%s\n", homedir);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 122 "shell.l"
{
    fprintf(stderr,"boof");
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "shell.l"
{
    std::string str = std::string(yytext);
    if (str.at(0) == '$') {
        str = str.substr(2, str.size() - 3);
    } else {
        str = str.substr(1, str.size() - 2);
    }
    int pin[2];
    int pout[2];

    pipe(pin);
    pipe(pout);

    int defaultin = dup(0);
    int defaultout = dup(1);


    dup2(pin[0], 0);
    dup2(pout[1], 1);
    close(pin[0]);
    close(pout[1]);


    int pid = fork();

    write(pin[1], str.c_str(), str.size());
    write(pin[1], "\n", 1);
    write(pin[1], "exit\n", 5);
    close(pin[1]);

    if(pid == -1) {
      perror("fork\n");
      exit(1);
    }
    //CHILD
    if (pid == 0) {
    char * arg[2];
    arg[1] = NULL;
    arg[0] =(char *) "shell";


    execvp("/proc/self/exe", arg);
    perror("execvp(subshell)");
    _exit(1);
    } else { //END CHILD

    waitpid(pid, NULL, 0);

    dup2(defaultin, 0);
    dup2(defaultout, 1);
    close(defaultin);
    close(defaultout);


    char c;
    std::string a;
    while(read(pout[0], &c, 1)) {
        if (c == '\n') {
            c =' ';
        }
        a.push_back(c);
    }
    close(pout[0]);
    for ( int i = a.size() - 1; i >= 0; i--) {
        myunputc(a.at(i));
    }
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 195 "shell.l"
{
  std::string str = std::string(yytext);
  str = str.substr(1, str.size() - 2);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 202 "shell.l"
{
  /* Assume that file names have only alpha chars */
  std::string str = std::string(yytext);
  yylval.cpp_string = new std::string(str);
  return WORD;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 208 "shell.l"
ECHO;
	YY_BREAK
#line 1844 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 275 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 275 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 274);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 208 "shell.l"
